{"ast":null,"code":"/**\r\n * alertifyjs 1.13.1 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2019 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\n(function (window) {\n  'use strict';\n\n  var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\n  /**\r\n   * Keys enum\r\n   * @type {Object}\r\n   */\n  var keys = {\n    ENTER: 13,\n    ESC: 27,\n    F1: 112,\n    F12: 123,\n    LEFT: 37,\n    RIGHT: 39,\n    TAB: 9\n  };\n  /**\r\n   * Default options \r\n   * @type {Object}\r\n   */\n  var defaults = {\n    autoReset: true,\n    basic: false,\n    closable: true,\n    closableByDimmer: true,\n    invokeOnCloseOff: false,\n    frameless: false,\n    defaultFocusOff: false,\n    maintainFocus: true,\n    //global default not per instance, applies to all dialogs\n    maximizable: true,\n    modal: true,\n    movable: true,\n    moveBounded: false,\n    overflow: true,\n    padding: true,\n    pinnable: true,\n    pinned: true,\n    preventBodyShift: false,\n    //global default not per instance, applies to all dialogs\n    resizable: true,\n    startMaximized: false,\n    transition: 'pulse',\n    transitionOff: false,\n    tabbable: ['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])' + NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET + ','),\n    //global\n    notifier: {\n      delay: 5,\n      position: 'bottom-right',\n      closeButton: false,\n      classes: {\n        base: 'alertify-notifier',\n        prefix: 'ajs-',\n        message: 'ajs-message',\n        top: 'ajs-top',\n        right: 'ajs-right',\n        bottom: 'ajs-bottom',\n        left: 'ajs-left',\n        center: 'ajs-center',\n        visible: 'ajs-visible',\n        hidden: 'ajs-hidden',\n        close: 'ajs-close'\n      }\n    },\n    glossary: {\n      title: 'AlertifyJS',\n      ok: 'OK',\n      cancel: 'Cancel',\n      acccpt: 'Accept',\n      deny: 'Deny',\n      confirm: 'Confirm',\n      decline: 'Decline',\n      close: 'Close',\n      maximize: 'Maximize',\n      restore: 'Restore'\n    },\n    theme: {\n      input: 'ajs-input',\n      ok: 'ajs-ok',\n      cancel: 'ajs-cancel'\n    },\n    hooks: {\n      preinit: function () {},\n      postinit: function () {}\n    }\n  };\n\n  //holds open dialogs instances\n  var openDialogs = [];\n\n  /**\r\n   * [Helper]  Adds the specified class(es) to the element.\r\n   *\r\n   * @element {node}      The element\r\n   * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n   * \r\n   * @return {undefined}\r\n   */\n  function addClass(element, classNames) {\n    element.className += ' ' + classNames;\n  }\n\n  /**\r\n   * [Helper]  Removes the specified class(es) from the element.\r\n   *\r\n   * @element {node}      The element\r\n   * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n   * \r\n   * @return {undefined}\r\n   */\n  function removeClass(element, classNames) {\n    var original = element.className.split(' ');\n    var toBeRemoved = classNames.split(' ');\n    for (var x = 0; x < toBeRemoved.length; x += 1) {\n      var index = original.indexOf(toBeRemoved[x]);\n      if (index > -1) {\n        original.splice(index, 1);\n      }\n    }\n    element.className = original.join(' ');\n  }\n\n  /**\r\n   * [Helper]  Checks if the document is RTL\r\n   *\r\n   * @return {Boolean} True if the document is RTL, false otherwise.\r\n   */\n  function isRightToLeft() {\n    return window.getComputedStyle(document.body).direction === 'rtl';\n  }\n  /**\r\n   * [Helper]  Get the document current scrollTop\r\n   *\r\n   * @return {Number} current document scrollTop value\r\n   */\n  function getScrollTop() {\n    return document.documentElement && document.documentElement.scrollTop || document.body.scrollTop;\n  }\n\n  /**\r\n   * [Helper]  Get the document current scrollLeft\r\n   *\r\n   * @return {Number} current document scrollLeft value\r\n   */\n  function getScrollLeft() {\n    return document.documentElement && document.documentElement.scrollLeft || document.body.scrollLeft;\n  }\n\n  /**\r\n  * Helper: clear contents\r\n  *\r\n  */\n  function clearContents(element) {\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  }\n  /**\r\n   * Extends a given prototype by merging properties from base into sub.\r\n   *\r\n   * @sub {Object} sub The prototype being overwritten.\r\n   * @base {Object} base The prototype being written.\r\n   *\r\n   * @return {Object} The extended prototype.\r\n   */\n  function copy(src) {\n    if (null === src) {\n      return src;\n    }\n    var cpy;\n    if (Array.isArray(src)) {\n      cpy = [];\n      for (var x = 0; x < src.length; x += 1) {\n        cpy.push(copy(src[x]));\n      }\n      return cpy;\n    }\n    if (src instanceof Date) {\n      return new Date(src.getTime());\n    }\n    if (src instanceof RegExp) {\n      cpy = new RegExp(src.source);\n      cpy.global = src.global;\n      cpy.ignoreCase = src.ignoreCase;\n      cpy.multiline = src.multiline;\n      cpy.lastIndex = src.lastIndex;\n      return cpy;\n    }\n    if (typeof src === 'object') {\n      cpy = {};\n      // copy dialog pototype over definition.\n      for (var prop in src) {\n        if (src.hasOwnProperty(prop)) {\n          cpy[prop] = copy(src[prop]);\n        }\n      }\n      return cpy;\n    }\n    return src;\n  }\n  /**\r\n    * Helper: destruct the dialog\r\n    *\r\n    */\n  function destruct(instance, initialize) {\n    if (instance.elements) {\n      //delete the dom and it's references.\n      var root = instance.elements.root;\n      root.parentNode.removeChild(root);\n      delete instance.elements;\n      //copy back initial settings.\n      instance.settings = copy(instance.__settings);\n      //re-reference init function.\n      instance.__init = initialize;\n      //delete __internal variable to allow re-initialization.\n      delete instance.__internal;\n    }\n  }\n\n  /**\r\n   * Test to check if passive event listeners are supported.\r\n   */\n  var IsPassiveSupported = false;\n  try {\n    var options = Object.defineProperty({}, 'passive', {\n      get: function () {\n        IsPassiveSupported = true;\n      }\n    });\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n  } catch (e) {}\n\n  /**\r\n  * Removes an event listener\r\n  *\r\n  * @param {HTMLElement} el The EventTarget to register the listenr on.\r\n  * @param {string} event The event type to listen for.\r\n  * @param {Function} handler The function to handle the event.\r\n  * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n  * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n  */\n  var on = function (el, event, fn, useCapture, passive) {\n    el.addEventListener(event, fn, IsPassiveSupported ? {\n      capture: useCapture,\n      passive: passive\n    } : useCapture === true);\n  };\n\n  /**\r\n   * Removes an event listener\r\n   *\r\n   * @param {HTMLElement} el The EventTarget to unregister the listenr from.\r\n   * @param {string} event The event type to remove.\r\n   * @param {Function} fn The event handler to remove.\r\n   * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n   * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n   */\n  var off = function (el, event, fn, useCapture, passive) {\n    el.removeEventListener(event, fn, IsPassiveSupported ? {\n      capture: useCapture,\n      passive: passive\n    } : useCapture === true);\n  };\n\n  /**\r\n   * Prevent default event from firing\r\n   *\r\n   * @param  {Event} event Event object\r\n   * @return {undefined}\r\n    function prevent ( event ) {\r\n      if ( event ) {\r\n          if ( event.preventDefault ) {\r\n              event.preventDefault();\r\n          } else {\r\n              event.returnValue = false;\r\n          }\r\n      }\r\n  }\r\n  */\n  var transition = function () {\n    var t, type;\n    var supported = false;\n    var transitions = {\n      'animation': 'animationend',\n      'OAnimation': 'oAnimationEnd oanimationend',\n      'msAnimation': 'MSAnimationEnd',\n      'MozAnimation': 'animationend',\n      'WebkitAnimation': 'webkitAnimationEnd'\n    };\n    for (t in transitions) {\n      if (document.documentElement.style[t] !== undefined) {\n        type = transitions[t];\n        supported = true;\n        break;\n      }\n    }\n    return {\n      type: type,\n      supported: supported\n    };\n  }();\n\n  /**\r\n  * Creates event handler delegate that sends the instance as last argument.\r\n  * \r\n  * @return {Function}    a function wrapper which sends the instance as last argument.\r\n  */\n  function delegate(context, method) {\n    return function () {\n      if (arguments.length > 0) {\n        var args = [];\n        for (var x = 0; x < arguments.length; x += 1) {\n          args.push(arguments[x]);\n        }\n        args.push(context);\n        return method.apply(context, args);\n      }\n      return method.apply(context, [null, context]);\n    };\n  }\n  /**\r\n  * Helper for creating a dialog close event.\r\n  * \r\n  * @return {object}\r\n  */\n  function createCloseEvent(index, button) {\n    return {\n      index: index,\n      button: button,\n      cancel: false\n    };\n  }\n  /**\r\n  * Helper for dispatching events.\r\n  *\r\n  * @param  {string} evenType The type of the event to disptach.\r\n  * @param  {object} instance The dialog instance disptaching the event.\r\n  *\r\n  * @return   {any}   The result of the invoked function.\r\n  */\n  function dispatchEvent(eventType, instance) {\n    if (typeof instance.get(eventType) === 'function') {\n      return instance.get(eventType).call(instance);\n    }\n  }\n\n  /**\r\n   * Super class for all dialogs\r\n   *\r\n   * @return {Object}\t\tbase dialog prototype\r\n   */\n  var dialog = function () {\n    var\n      //holds the list of used keys.\n      usedKeys = [],\n      //dummy variable, used to trigger dom reflow.\n      reflow = null,\n      //holds body tab index in case it has any.\n      tabindex = false,\n      //condition for detecting safari\n      isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\n      //dialog building blocks\n      templates = {\n        dimmer: '<div class=\"ajs-dimmer\"></div>',\n        /*tab index required to fire click event before body focus*/\n        modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\n        dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\n        reset: '<button class=\"ajs-reset\"></button>',\n        commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\n        header: '<div class=\"ajs-header\"></div>',\n        body: '<div class=\"ajs-body\"></div>',\n        content: '<div class=\"ajs-content\"></div>',\n        footer: '<div class=\"ajs-footer\"></div>',\n        buttons: {\n          primary: '<div class=\"ajs-primary ajs-buttons\"></div>',\n          auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>'\n        },\n        button: '<button class=\"ajs-button\"></button>',\n        resizeHandle: '<div class=\"ajs-handle\"></div>'\n      },\n      //common class names\n      classes = {\n        animationIn: 'ajs-in',\n        animationOut: 'ajs-out',\n        base: 'alertify',\n        basic: 'ajs-basic',\n        capture: 'ajs-capture',\n        closable: 'ajs-closable',\n        fixed: 'ajs-fixed',\n        frameless: 'ajs-frameless',\n        hidden: 'ajs-hidden',\n        maximize: 'ajs-maximize',\n        maximized: 'ajs-maximized',\n        maximizable: 'ajs-maximizable',\n        modeless: 'ajs-modeless',\n        movable: 'ajs-movable',\n        noSelection: 'ajs-no-selection',\n        noOverflow: 'ajs-no-overflow',\n        noPadding: 'ajs-no-padding',\n        pin: 'ajs-pin',\n        pinnable: 'ajs-pinnable',\n        prefix: 'ajs-',\n        resizable: 'ajs-resizable',\n        restore: 'ajs-restore',\n        shake: 'ajs-shake',\n        unpinned: 'ajs-unpinned',\n        noTransition: 'ajs-no-transition'\n      };\n\n    /**\r\n     * Helper: initializes the dialog instance\r\n     * \r\n     * @return\t{Number}\tThe total count of currently open modals.\r\n     */\n    function initialize(instance) {\n      if (!instance.__internal) {\n        //invoke preinit global hook\n        alertify.defaults.hooks.preinit(instance);\n        //no need to expose init after this.\n        delete instance.__init;\n\n        //keep a copy of initial dialog settings\n        if (!instance.__settings) {\n          instance.__settings = copy(instance.settings);\n        }\n\n        //get dialog buttons/focus setup\n        var setup;\n        if (typeof instance.setup === 'function') {\n          setup = instance.setup();\n          setup.options = setup.options || {};\n          setup.focus = setup.focus || {};\n        } else {\n          setup = {\n            buttons: [],\n            focus: {\n              element: null,\n              select: false\n            },\n            options: {}\n          };\n        }\n\n        //initialize hooks object.\n        if (typeof instance.hooks !== 'object') {\n          instance.hooks = {};\n        }\n\n        //copy buttons defintion\n        var buttonsDefinition = [];\n        if (Array.isArray(setup.buttons)) {\n          for (var b = 0; b < setup.buttons.length; b += 1) {\n            var ref = setup.buttons[b],\n              cpy = {};\n            for (var i in ref) {\n              if (ref.hasOwnProperty(i)) {\n                cpy[i] = ref[i];\n              }\n            }\n            buttonsDefinition.push(cpy);\n          }\n        }\n        var internal = instance.__internal = {\n          /**\r\n           * Flag holding the open state of the dialog\r\n           * \r\n           * @type {Boolean}\r\n           */\n          isOpen: false,\n          /**\r\n           * Active element is the element that will receive focus after\r\n           * closing the dialog. It defaults as the body tag, but gets updated\r\n           * to the last focused element before the dialog was opened.\r\n           *\r\n           * @type {Node}\r\n           */\n          activeElement: document.body,\n          timerIn: undefined,\n          timerOut: undefined,\n          buttons: buttonsDefinition,\n          focus: setup.focus,\n          options: {\n            title: undefined,\n            modal: undefined,\n            basic: undefined,\n            frameless: undefined,\n            defaultFocusOff: undefined,\n            pinned: undefined,\n            movable: undefined,\n            moveBounded: undefined,\n            resizable: undefined,\n            autoReset: undefined,\n            closable: undefined,\n            closableByDimmer: undefined,\n            invokeOnCloseOff: undefined,\n            maximizable: undefined,\n            startMaximized: undefined,\n            pinnable: undefined,\n            transition: undefined,\n            transitionOff: undefined,\n            padding: undefined,\n            overflow: undefined,\n            onshow: undefined,\n            onclosing: undefined,\n            onclose: undefined,\n            onfocus: undefined,\n            onmove: undefined,\n            onmoved: undefined,\n            onresize: undefined,\n            onresized: undefined,\n            onmaximize: undefined,\n            onmaximized: undefined,\n            onrestore: undefined,\n            onrestored: undefined\n          },\n          resetHandler: undefined,\n          beginMoveHandler: undefined,\n          beginResizeHandler: undefined,\n          bringToFrontHandler: undefined,\n          modalClickHandler: undefined,\n          buttonsClickHandler: undefined,\n          commandsClickHandler: undefined,\n          transitionInHandler: undefined,\n          transitionOutHandler: undefined,\n          destroy: undefined\n        };\n        var elements = {};\n        //root node\n        elements.root = document.createElement('div');\n        //prevent FOUC in case of async styles loading.\n        elements.root.style.display = 'none';\n        elements.root.className = classes.base + ' ' + classes.hidden + ' ';\n        elements.root.innerHTML = templates.dimmer + templates.modal;\n\n        //dimmer\n        elements.dimmer = elements.root.firstChild;\n\n        //dialog\n        elements.modal = elements.root.lastChild;\n        elements.modal.innerHTML = templates.dialog;\n        elements.dialog = elements.modal.firstChild;\n        elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\n\n        //reset links\n        elements.reset = [];\n        elements.reset.push(elements.dialog.firstChild);\n        elements.reset.push(elements.dialog.lastChild);\n\n        //commands\n        elements.commands = {};\n        elements.commands.container = elements.reset[0].nextSibling;\n        elements.commands.pin = elements.commands.container.firstChild;\n        elements.commands.maximize = elements.commands.pin.nextSibling;\n        elements.commands.close = elements.commands.maximize.nextSibling;\n\n        //header\n        elements.header = elements.commands.container.nextSibling;\n\n        //body\n        elements.body = elements.header.nextSibling;\n        elements.body.innerHTML = templates.content;\n        elements.content = elements.body.firstChild;\n\n        //footer\n        elements.footer = elements.body.nextSibling;\n        elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\n\n        //resize handle\n        elements.resizeHandle = elements.footer.nextSibling;\n\n        //buttons\n        elements.buttons = {};\n        elements.buttons.auxiliary = elements.footer.firstChild;\n        elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\n        elements.buttons.primary.innerHTML = templates.button;\n        elements.buttonTemplate = elements.buttons.primary.firstChild;\n        //remove button template\n        elements.buttons.primary.removeChild(elements.buttonTemplate);\n        for (var x = 0; x < instance.__internal.buttons.length; x += 1) {\n          var button = instance.__internal.buttons[x];\n\n          // add to the list of used keys.\n          if (usedKeys.indexOf(button.key) < 0) {\n            usedKeys.push(button.key);\n          }\n          button.element = elements.buttonTemplate.cloneNode();\n          button.element.innerHTML = button.text;\n          if (typeof button.className === 'string' && button.className !== '') {\n            addClass(button.element, button.className);\n          }\n          for (var key in button.attrs) {\n            if (key !== 'className' && button.attrs.hasOwnProperty(key)) {\n              button.element.setAttribute(key, button.attrs[key]);\n            }\n          }\n          if (button.scope === 'auxiliary') {\n            elements.buttons.auxiliary.appendChild(button.element);\n          } else {\n            elements.buttons.primary.appendChild(button.element);\n          }\n        }\n        //make elements pubic\n        instance.elements = elements;\n\n        //save event handlers delegates\n        internal.resetHandler = delegate(instance, onReset);\n        internal.beginMoveHandler = delegate(instance, beginMove);\n        internal.beginResizeHandler = delegate(instance, beginResize);\n        internal.bringToFrontHandler = delegate(instance, bringToFront);\n        internal.modalClickHandler = delegate(instance, modalClickHandler);\n        internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\n        internal.commandsClickHandler = delegate(instance, commandsClickHandler);\n        internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\n        internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\n\n        //settings\n        for (var opKey in internal.options) {\n          if (setup.options[opKey] !== undefined) {\n            // if found in user options\n            instance.set(opKey, setup.options[opKey]);\n          } else if (alertify.defaults.hasOwnProperty(opKey)) {\n            // else if found in defaults options\n            instance.set(opKey, alertify.defaults[opKey]);\n          } else if (opKey === 'title') {\n            // else if title key, use alertify.defaults.glossary\n            instance.set(opKey, alertify.defaults.glossary[opKey]);\n          }\n        }\n\n        // allow dom customization\n        if (typeof instance.build === 'function') {\n          instance.build();\n        }\n\n        //invoke postinit global hook\n        alertify.defaults.hooks.postinit(instance);\n      }\n\n      //add to the end of the DOM tree.\n      document.body.appendChild(instance.elements.root);\n    }\n\n    /**\r\n     * Helper: maintains scroll position\r\n     *\r\n     */\n    var scrollX, scrollY;\n    function saveScrollPosition() {\n      scrollX = getScrollLeft();\n      scrollY = getScrollTop();\n    }\n    function restoreScrollPosition() {\n      window.scrollTo(scrollX, scrollY);\n    }\n\n    /**\r\n     * Helper: adds/removes no-overflow class from body\r\n     *\r\n     */\n    function ensureNoOverflow() {\n      var requiresNoOverflow = 0;\n      for (var x = 0; x < openDialogs.length; x += 1) {\n        var instance = openDialogs[x];\n        if (instance.isModal() || instance.isMaximized()) {\n          requiresNoOverflow += 1;\n        }\n      }\n      if (requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0) {\n        //last open modal or last maximized one\n        removeClass(document.body, classes.noOverflow);\n        preventBodyShift(false);\n      } else if (requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0) {\n        //first open modal or first maximized one\n        preventBodyShift(true);\n        addClass(document.body, classes.noOverflow);\n      }\n    }\n    var top = '',\n      topScroll = 0;\n    /**\r\n     * Helper: prevents body shift.\r\n     *\r\n     */\n    function preventBodyShift(add) {\n      if (alertify.defaults.preventBodyShift) {\n        if (add && document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n          //&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\n          topScroll = scrollY;\n          top = window.getComputedStyle(document.body).top;\n          addClass(document.body, classes.fixed);\n          document.body.style.top = -scrollY + 'px';\n        } else if (!add) {\n          scrollY = topScroll;\n          document.body.style.top = top;\n          removeClass(document.body, classes.fixed);\n          restoreScrollPosition();\n        }\n      }\n    }\n\n    /**\r\n     * Sets the name of the transition used to show/hide the dialog\r\n     * \r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     */\n    function updateTransition(instance, value, oldValue) {\n      if (typeof oldValue === 'string') {\n        removeClass(instance.elements.root, classes.prefix + oldValue);\n      }\n      addClass(instance.elements.root, classes.prefix + value);\n      reflow = instance.elements.root.offsetWidth;\n    }\n\n    /**\r\n     * Toggles the dialog no transition \r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateTransitionOff(instance) {\n      if (instance.get('transitionOff')) {\n        // add class\n        addClass(instance.elements.root, classes.noTransition);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.noTransition);\n      }\n    }\n\n    /**\r\n     * Toggles the dialog display mode\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateDisplayMode(instance) {\n      if (instance.get('modal')) {\n        //make modal\n        removeClass(instance.elements.root, classes.modeless);\n\n        //only if open\n        if (instance.isOpen()) {\n          unbindModelessEvents(instance);\n\n          //in case a pinned modless dialog was made modal while open.\n          updateAbsPositionFix(instance);\n          ensureNoOverflow();\n        }\n      } else {\n        //make modelss\n        addClass(instance.elements.root, classes.modeless);\n\n        //only if open\n        if (instance.isOpen()) {\n          bindModelessEvents(instance);\n\n          //in case pin/unpin was called while a modal is open\n          updateAbsPositionFix(instance);\n          ensureNoOverflow();\n        }\n      }\n    }\n\n    /**\r\n     * Toggles the dialog basic view mode \r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateBasicMode(instance) {\n      if (instance.get('basic')) {\n        // add class\n        addClass(instance.elements.root, classes.basic);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.basic);\n      }\n    }\n\n    /**\r\n     * Toggles the dialog frameless view mode \r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateFramelessMode(instance) {\n      if (instance.get('frameless')) {\n        // add class\n        addClass(instance.elements.root, classes.frameless);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.frameless);\n      }\n    }\n\n    /**\r\n     * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n     *\r\n     * @param {Event} event Focus event\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bringToFront(event, instance) {\n      // Do not bring to front if preceeded by an open modal\n      var index = openDialogs.indexOf(instance);\n      for (var x = index + 1; x < openDialogs.length; x += 1) {\n        if (openDialogs[x].isModal()) {\n          return;\n        }\n      }\n\n      // Bring to front by making it the last child.\n      if (document.body.lastChild !== instance.elements.root) {\n        document.body.appendChild(instance.elements.root);\n        //also make sure its at the end of the list\n        openDialogs.splice(openDialogs.indexOf(instance), 1);\n        openDialogs.push(instance);\n        setFocus(instance);\n      }\n      return false;\n    }\n\n    /**\r\n     * Helper: reflects dialogs options updates\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {String} option The updated option name.\r\n     *\r\n     * @return\t{undefined}\t\r\n     */\n    function optionUpdated(instance, option, oldValue, newValue) {\n      switch (option) {\n        case 'title':\n          instance.setHeader(newValue);\n          break;\n        case 'modal':\n          updateDisplayMode(instance);\n          break;\n        case 'basic':\n          updateBasicMode(instance);\n          break;\n        case 'frameless':\n          updateFramelessMode(instance);\n          break;\n        case 'pinned':\n          updatePinned(instance);\n          break;\n        case 'closable':\n          updateClosable(instance);\n          break;\n        case 'maximizable':\n          updateMaximizable(instance);\n          break;\n        case 'pinnable':\n          updatePinnable(instance);\n          break;\n        case 'movable':\n          updateMovable(instance);\n          break;\n        case 'resizable':\n          updateResizable(instance);\n          break;\n        case 'padding':\n          if (newValue) {\n            removeClass(instance.elements.root, classes.noPadding);\n          } else if (instance.elements.root.className.indexOf(classes.noPadding) < 0) {\n            addClass(instance.elements.root, classes.noPadding);\n          }\n          break;\n        case 'overflow':\n          if (newValue) {\n            removeClass(instance.elements.root, classes.noOverflow);\n          } else if (instance.elements.root.className.indexOf(classes.noOverflow) < 0) {\n            addClass(instance.elements.root, classes.noOverflow);\n          }\n          break;\n        case 'transition':\n          updateTransition(instance, newValue, oldValue);\n          break;\n        case 'transitionOff':\n          updateTransitionOff(instance);\n          break;\n      }\n\n      // internal on option updated event\n      if (typeof instance.hooks.onupdate === 'function') {\n        instance.hooks.onupdate.call(instance, option, oldValue, newValue);\n      }\n    }\n\n    /**\r\n     * Helper: reflects dialogs options updates\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Object} obj The object to set/get a value on/from.\r\n     * @param {Function} callback The callback function to call if the key was found.\r\n     * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n     * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n     * @param {String} option The updated option name.\r\n     *\r\n     * @return\t{Object} result object \r\n     *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n     *\t\tGET: \r\n     *\t\t- found: a flag indicating if the key was found or not.\r\n     *\t\t- value: the property value.\r\n     *\t\tSET:\r\n     *\t\t- items: a list of key value pairs of the properties being set.\r\n     *\t\t\t\teach contains:\r\n     *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n     *\t\t\t\t\t- key: the property key.\r\n     *\t\t\t\t\t- value: the property value.\r\n     */\n    function update(instance, obj, callback, key, value) {\n      var result = {\n        op: undefined,\n        items: []\n      };\n      if (typeof value === 'undefined' && typeof key === 'string') {\n        //get\n        result.op = 'get';\n        if (obj.hasOwnProperty(key)) {\n          result.found = true;\n          result.value = obj[key];\n        } else {\n          result.found = false;\n          result.value = undefined;\n        }\n      } else {\n        var old;\n        //set\n        result.op = 'set';\n        if (typeof key === 'object') {\n          //set multiple\n          var args = key;\n          for (var prop in args) {\n            if (obj.hasOwnProperty(prop)) {\n              if (obj[prop] !== args[prop]) {\n                old = obj[prop];\n                obj[prop] = args[prop];\n                callback.call(instance, prop, old, args[prop]);\n              }\n              result.items.push({\n                'key': prop,\n                'value': args[prop],\n                'found': true\n              });\n            } else {\n              result.items.push({\n                'key': prop,\n                'value': args[prop],\n                'found': false\n              });\n            }\n          }\n        } else if (typeof key === 'string') {\n          //set single\n          if (obj.hasOwnProperty(key)) {\n            if (obj[key] !== value) {\n              old = obj[key];\n              obj[key] = value;\n              callback.call(instance, key, old, value);\n            }\n            result.items.push({\n              'key': key,\n              'value': value,\n              'found': true\n            });\n          } else {\n            result.items.push({\n              'key': key,\n              'value': value,\n              'found': false\n            });\n          }\n        } else {\n          //invalid params\n          throw new Error('args must be a string or object');\n        }\n      }\n      return result;\n    }\n\n    /**\r\n     * Triggers a close event.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function triggerClose(instance) {\n      var found;\n      triggerCallback(instance, function (button) {\n        return found = instance.get('invokeOnCloseOff') !== true && button.invokeOnClose === true;\n      });\n      //none of the buttons registered as onclose callback\n      //close the dialog\n      if (!found && instance.isOpen()) {\n        instance.close();\n      }\n    }\n\n    /**\r\n     * Dialogs commands event handler, attached to the dialog commands element.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function commandsClickHandler(event, instance) {\n      var target = event.srcElement || event.target;\n      switch (target) {\n        case instance.elements.commands.pin:\n          if (!instance.isPinned()) {\n            pin(instance);\n          } else {\n            unpin(instance);\n          }\n          break;\n        case instance.elements.commands.maximize:\n          if (!instance.isMaximized()) {\n            maximize(instance);\n          } else {\n            restore(instance);\n          }\n          break;\n        case instance.elements.commands.close:\n          triggerClose(instance);\n          break;\n      }\n      return false;\n    }\n\n    /**\r\n     * Helper: pins the modeless dialog.\r\n     *\r\n     * @param {Object} instance\tThe dialog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function pin(instance) {\n      //pin the dialog\n      instance.set('pinned', true);\n    }\n\n    /**\r\n     * Helper: unpins the modeless dialog.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function unpin(instance) {\n      //unpin the dialog \n      instance.set('pinned', false);\n    }\n\n    /**\r\n     * Helper: enlarges the dialog to fill the entire screen.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function maximize(instance) {\n      // allow custom `onmaximize` method\n      dispatchEvent('onmaximize', instance);\n      //maximize the dialog \n      addClass(instance.elements.root, classes.maximized);\n      if (instance.isOpen()) {\n        ensureNoOverflow();\n      }\n      // allow custom `onmaximized` method\n      dispatchEvent('onmaximized', instance);\n    }\n\n    /**\r\n     * Helper: returns the dialog to its former size.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function restore(instance) {\n      // allow custom `onrestore` method\n      dispatchEvent('onrestore', instance);\n      //maximize the dialog \n      removeClass(instance.elements.root, classes.maximized);\n      if (instance.isOpen()) {\n        ensureNoOverflow();\n      }\n      // allow custom `onrestored` method\n      dispatchEvent('onrestored', instance);\n    }\n\n    /**\r\n     * Show or hide the maximize box.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updatePinnable(instance) {\n      if (instance.get('pinnable')) {\n        // add class\n        addClass(instance.elements.root, classes.pinnable);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.pinnable);\n      }\n    }\n\n    /**\r\n     * Helper: Fixes the absolutly positioned modal div position.\r\n     *\r\n     * @param {Object} instance The dialog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function addAbsPositionFix(instance) {\n      var scrollLeft = getScrollLeft();\n      instance.elements.modal.style.marginTop = getScrollTop() + 'px';\n      instance.elements.modal.style.marginLeft = scrollLeft + 'px';\n      instance.elements.modal.style.marginRight = -scrollLeft + 'px';\n    }\n\n    /**\r\n     * Helper: Removes the absolutly positioned modal div position fix.\r\n     *\r\n     * @param {Object} instance The dialog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function removeAbsPositionFix(instance) {\n      var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\n      var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\n      instance.elements.modal.style.marginTop = '';\n      instance.elements.modal.style.marginLeft = '';\n      instance.elements.modal.style.marginRight = '';\n      if (instance.isOpen()) {\n        var top = 0,\n          left = 0;\n        if (instance.elements.dialog.style.top !== '') {\n          top = parseInt(instance.elements.dialog.style.top, 10);\n        }\n        instance.elements.dialog.style.top = top + (marginTop - getScrollTop()) + 'px';\n        if (instance.elements.dialog.style.left !== '') {\n          left = parseInt(instance.elements.dialog.style.left, 10);\n        }\n        instance.elements.dialog.style.left = left + (marginLeft - getScrollLeft()) + 'px';\n      }\n    }\n    /**\r\n     * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n     *\r\n     * @param {Object} instance The dialog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateAbsPositionFix(instance) {\n      // if modeless and unpinned add fix\n      if (!instance.get('modal') && !instance.get('pinned')) {\n        addAbsPositionFix(instance);\n      } else {\n        removeAbsPositionFix(instance);\n      }\n    }\n    /**\r\n     * Toggles the dialog position lock | modeless only.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to make it modal, false otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updatePinned(instance) {\n      if (instance.get('pinned')) {\n        removeClass(instance.elements.root, classes.unpinned);\n        if (instance.isOpen()) {\n          removeAbsPositionFix(instance);\n        }\n      } else {\n        addClass(instance.elements.root, classes.unpinned);\n        if (instance.isOpen() && !instance.isModal()) {\n          addAbsPositionFix(instance);\n        }\n      }\n    }\n\n    /**\r\n     * Show or hide the maximize box.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateMaximizable(instance) {\n      if (instance.get('maximizable')) {\n        // add class\n        addClass(instance.elements.root, classes.maximizable);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.maximizable);\n      }\n    }\n\n    /**\r\n     * Show or hide the close box.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateClosable(instance) {\n      if (instance.get('closable')) {\n        // add class\n        addClass(instance.elements.root, classes.closable);\n        bindClosableEvents(instance);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.closable);\n        unbindClosableEvents(instance);\n      }\n    }\n    var cancelClick = false,\n      // flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\n      modalClickHandlerTS = 0 // stores last click timestamp to prevent executing the handler twice on double click.\n    ;\n\n    /**\r\n     * Helper: closes the modal dialog when clicking the modal\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function modalClickHandler(event, instance) {\n      if (event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick) {\n        var target = event.srcElement || event.target;\n        if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\n          triggerClose(instance);\n        }\n      }\n      cancelClick = false;\n    }\n\n    // stores last call timestamp to prevent triggering the callback twice.\n    var callbackTS = 0;\n    // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\n    var cancelKeyup = false;\n    /** \r\n     * Helper: triggers a button callback\r\n     *\r\n     * @param {Object}\t\tThe dilog instance.\r\n     * @param {Function}\tCallback to check which button triggered the event.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function triggerCallback(instance, check) {\n      if (Date.now() - callbackTS > 200 && (callbackTS = Date.now())) {\n        for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\n          var button = instance.__internal.buttons[idx];\n          if (!button.element.disabled && check(button)) {\n            var closeEvent = createCloseEvent(idx, button);\n            if (typeof instance.callback === 'function') {\n              instance.callback.apply(instance, [closeEvent]);\n            }\n            //close the dialog only if not canceled.\n            if (closeEvent.cancel === false) {\n              instance.close();\n            }\n            break;\n          }\n        }\n      }\n    }\n\n    /**\r\n     * Clicks event handler, attached to the dialog footer.\r\n     *\r\n     * @param {Event}\t\tDOM event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function buttonsClickHandler(event, instance) {\n      var target = event.srcElement || event.target;\n      triggerCallback(instance, function (button) {\n        // if this button caused the click, cancel keyup event\n        return button.element === target && (cancelKeyup = true);\n      });\n    }\n\n    /**\r\n     * Keyup event handler, attached to the document.body\r\n     *\r\n     * @param {Event}\t\tDOM event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function keyupHandler(event) {\n      //hitting enter while button has focus will trigger keyup too.\n      //ignore if handled by clickHandler\n      if (cancelKeyup) {\n        cancelKeyup = false;\n        return;\n      }\n      var instance = openDialogs[openDialogs.length - 1];\n      var keyCode = event.keyCode;\n      if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\n        triggerClose(instance);\n        return false;\n      } else if (usedKeys.indexOf(keyCode) > -1) {\n        triggerCallback(instance, function (button) {\n          return button.key === keyCode;\n        });\n        return false;\n      }\n    }\n    /**\r\n    * Keydown event handler, attached to the document.body\r\n    *\r\n    * @param {Event}\t\tDOM event object.\r\n    * @param {Object}\t\tThe dilog instance.\r\n    * \r\n    * @return {undefined}\r\n    */\n    function keydownHandler(event) {\n      var instance = openDialogs[openDialogs.length - 1];\n      var keyCode = event.keyCode;\n      if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\n        var buttons = instance.__internal.buttons;\n        for (var x = 0; x < buttons.length; x += 1) {\n          if (document.activeElement === buttons[x].element) {\n            switch (keyCode) {\n              case keys.LEFT:\n                buttons[(x || buttons.length) - 1].element.focus();\n                return;\n              case keys.RIGHT:\n                buttons[(x + 1) % buttons.length].element.focus();\n                return;\n            }\n          }\n        }\n      } else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\n        event.preventDefault();\n        event.stopPropagation();\n        triggerCallback(instance, function (button) {\n          return button.key === keyCode;\n        });\n        return false;\n      }\n    }\n\n    /**\r\n     * Sets focus to proper dialog element\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function setFocus(instance, resetTarget) {\n      // reset target has already been determined.\n      if (resetTarget) {\n        resetTarget.focus();\n      } else {\n        // current instance focus settings\n        var focus = instance.__internal.focus;\n        // the focus element.\n        var element = focus.element;\n        switch (typeof focus.element) {\n          // a number means a button index\n          case 'number':\n            if (instance.__internal.buttons.length > focus.element) {\n              //in basic view, skip focusing the buttons.\n              if (instance.get('basic') === true) {\n                element = instance.elements.reset[0];\n              } else {\n                element = instance.__internal.buttons[focus.element].element;\n              }\n            }\n            break;\n          // a string means querySelector to select from dialog body contents.\n          case 'string':\n            element = instance.elements.body.querySelector(focus.element);\n            break;\n          // a function should return the focus element.\n          case 'function':\n            element = focus.element.call(instance);\n            break;\n        }\n\n        // if no focus element, default to first reset element.\n        if (instance.get('defaultFocusOff') === true || (typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0) {\n          element = instance.elements.reset[0];\n        }\n        // focus\n        if (element && element.focus) {\n          element.focus();\n          // if selectable\n          if (focus.select && element.select) {\n            element.select();\n          }\n        }\n      }\n    }\n\n    /**\r\n     * Focus event handler, attached to document.body and dialogs own reset links.\r\n     * handles the focus for modal dialogs only.\r\n     *\r\n     * @param {Event} event DOM focus event object.\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function onReset(event, instance) {\n      // should work on last modal if triggered from document.body \n      if (!instance) {\n        for (var x = openDialogs.length - 1; x > -1; x -= 1) {\n          if (openDialogs[x].isModal()) {\n            instance = openDialogs[x];\n            break;\n          }\n        }\n      }\n      if (instance) {\n        // if modal\n        if (instance.isModal()) {\n          // determine reset target to enable forward/backward tab cycle.\n          var firstReset = instance.elements.reset[0],\n            lastReset = instance.elements.reset[1],\n            lastFocusedElement = event.relatedTarget,\n            within = instance.elements.root.contains(lastFocusedElement),\n            target = event.srcElement || event.target,\n            resetTarget;\n\n          //if the previous focused element element was outside the modal do nthing\n          if ( /*first show */\n          target === firstReset && !within || /*focus cycle */\n          target === lastReset && lastFocusedElement === firstReset) {\n            return;\n          } else if (target === lastReset || target === document.body) {\n            resetTarget = firstReset;\n          } else if (target === firstReset && lastFocusedElement === lastReset) {\n            resetTarget = findTabbable(instance);\n          } else if (target === firstReset && within) {\n            resetTarget = findTabbable(instance, true);\n          }\n          // focus\n          setFocus(instance, resetTarget);\n        }\n      }\n    }\n    function findTabbable(instance, last) {\n      var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\n      if (last) {\n        tabbables.reverse();\n      }\n      for (var x = 0; x < tabbables.length; x += 1) {\n        var tabbable = tabbables[x];\n        //check if visible\n        if (!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)) {\n          return tabbable;\n        }\n      }\n    }\n    function recycleTab(event) {\n      var instance = openDialogs[openDialogs.length - 1];\n      if (instance && event.shiftKey && event.keyCode === keys.TAB) {\n        instance.elements.reset[1].focus();\n      }\n    }\n    /**\r\n     * Transition in transitionend event handler. \r\n     *\r\n     * @param {Event}\t\tTransitionEnd event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function handleTransitionInEvent(event, instance) {\n      // clear the timer\n      clearTimeout(instance.__internal.timerIn);\n\n      // once transition is complete, set focus\n      setFocus(instance);\n\n      // allow handling key up after transition ended.\n      cancelKeyup = false;\n\n      // allow custom `onfocus` method\n      dispatchEvent('onfocus', instance);\n\n      // unbind the event\n      off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\n      removeClass(instance.elements.root, classes.animationIn);\n    }\n\n    /**\r\n     * Transition out transitionend event handler. \r\n     *\r\n     * @param {Event}\t\tTransitionEnd event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function handleTransitionOutEvent(event, instance) {\n      // clear the timer\n      clearTimeout(instance.__internal.timerOut);\n      // unbind the event\n      off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\n\n      // reset move updates\n      resetMove(instance);\n      // reset resize updates\n      resetResize(instance);\n\n      // restore if maximized\n      if (instance.isMaximized() && !instance.get('startMaximized')) {\n        restore(instance);\n      }\n\n      //destory the instance\n      if (typeof instance.__internal.destroy === 'function') {\n        instance.__internal.destroy.apply(instance);\n      }\n    }\n    /* Controls moving a dialog around */\n    //holde the current moving instance\n    var movable = null,\n      //holds the current X offset when move starts\n      offsetX = 0,\n      //holds the current Y offset when move starts\n      offsetY = 0,\n      xProp = 'pageX',\n      yProp = 'pageY',\n      bounds = null,\n      refreshTop = false,\n      moveDelegate = null;\n\n    /**\r\n     * Helper: sets the element top/left coordinates\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Node} element The element being moved.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function moveElement(event, element) {\n      var left = event[xProp] - offsetX,\n        top = event[yProp] - offsetY;\n      if (refreshTop) {\n        top -= document.body.scrollTop;\n      }\n      element.style.left = left + 'px';\n      element.style.top = top + 'px';\n    }\n    /**\r\n     * Helper: sets the element top/left coordinates within screen bounds\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Node} element The element being moved.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function moveElementBounded(event, element) {\n      var left = event[xProp] - offsetX,\n        top = event[yProp] - offsetY;\n      if (refreshTop) {\n        top -= document.body.scrollTop;\n      }\n      element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\n      if (refreshTop) {\n        element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\n      } else {\n        element.style.top = Math.max(bounds.minTop, top) + 'px';\n      }\n    }\n\n    /**\r\n     * Triggers the start of a move event, attached to the header element mouse down event.\r\n     * Adds no-selection class to the body, disabling selection while moving.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance The dilog instance.\r\n     * \r\n     * @return {Boolean} false\r\n     */\n    function beginMove(event, instance) {\n      if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\n        var eventSrc,\n          left = 0,\n          top = 0;\n        if (event.type === 'touchstart') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n          xProp = 'clientX';\n          yProp = 'clientY';\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n        if (eventSrc) {\n          var element = instance.elements.dialog;\n          addClass(element, classes.capture);\n          if (element.style.left) {\n            left = parseInt(element.style.left, 10);\n          }\n          if (element.style.top) {\n            top = parseInt(element.style.top, 10);\n          }\n          offsetX = eventSrc[xProp] - left;\n          offsetY = eventSrc[yProp] - top;\n          if (instance.isModal()) {\n            offsetY += instance.elements.modal.scrollTop;\n          } else if (instance.isPinned()) {\n            offsetY -= document.body.scrollTop;\n          }\n          if (instance.get('moveBounded')) {\n            var current = element,\n              offsetLeft = -left,\n              offsetTop = -top;\n\n            //calc offset\n            do {\n              offsetLeft += current.offsetLeft;\n              offsetTop += current.offsetTop;\n            } while (current = current.offsetParent);\n            bounds = {\n              maxLeft: offsetLeft,\n              minLeft: -offsetLeft,\n              maxTop: document.documentElement.clientHeight - element.clientHeight - offsetTop,\n              minTop: -offsetTop\n            };\n            moveDelegate = moveElementBounded;\n          } else {\n            bounds = null;\n            moveDelegate = moveElement;\n          }\n\n          // allow custom `onmove` method\n          dispatchEvent('onmove', instance);\n          refreshTop = !instance.isModal() && instance.isPinned();\n          movable = instance;\n          moveDelegate(eventSrc, element);\n          addClass(document.body, classes.noSelection);\n          return false;\n        }\n      }\n    }\n\n    /**\r\n     * The actual move handler,  attached to document.body mousemove event.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function move(event) {\n      if (movable) {\n        var eventSrc;\n        if (event.type === 'touchmove') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n        if (eventSrc) {\n          moveDelegate(eventSrc, movable.elements.dialog);\n        }\n      }\n    }\n\n    /**\r\n     * Triggers the end of a move event,  attached to document.body mouseup event.\r\n     * Removes no-selection class from document.body, allowing selection.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function endMove() {\n      if (movable) {\n        var instance = movable;\n        movable = bounds = null;\n        removeClass(document.body, classes.noSelection);\n        removeClass(instance.elements.dialog, classes.capture);\n        // allow custom `onmoved` method\n        dispatchEvent('onmoved', instance);\n      }\n    }\n\n    /**\r\n     * Resets any changes made by moving the element to its original state,\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function resetMove(instance) {\n      movable = null;\n      var element = instance.elements.dialog;\n      element.style.left = element.style.top = '';\n    }\n\n    /**\r\n     * Updates the dialog move behavior.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateMovable(instance) {\n      if (instance.get('movable')) {\n        // add class\n        addClass(instance.elements.root, classes.movable);\n        if (instance.isOpen()) {\n          bindMovableEvents(instance);\n        }\n      } else {\n        //reset\n        resetMove(instance);\n        // remove class\n        removeClass(instance.elements.root, classes.movable);\n        if (instance.isOpen()) {\n          unbindMovableEvents(instance);\n        }\n      }\n    }\n\n    /* Controls moving a dialog around */\n    //holde the current instance being resized\t\t\n    var resizable = null,\n      //holds the staring left offset when resize starts.\n      startingLeft = Number.Nan,\n      //holds the staring width when resize starts.\n      startingWidth = 0,\n      //holds the initial width when resized for the first time.\n      minWidth = 0,\n      //holds the offset of the resize handle.\n      handleOffset = 0;\n\n    /**\r\n     * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n     *\r\n     * @param {Event} event\tDOM mousemove event object.\r\n     * @param {Node} element The element being moved.\r\n     * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function resizeElement(event, element, pageRelative) {\n      //calculate offsets from 0,0\n      var current = element;\n      var offsetLeft = 0;\n      var offsetTop = 0;\n      do {\n        offsetLeft += current.offsetLeft;\n        offsetTop += current.offsetTop;\n      } while (current = current.offsetParent);\n\n      // determine X,Y coordinates.\n      var X, Y;\n      if (pageRelative === true) {\n        X = event.pageX;\n        Y = event.pageY;\n      } else {\n        X = event.clientX;\n        Y = event.clientY;\n      }\n      // rtl handling\n      var isRTL = isRightToLeft();\n      if (isRTL) {\n        // reverse X \n        X = document.body.offsetWidth - X;\n        // if has a starting left, calculate offsetRight\n        if (!isNaN(startingLeft)) {\n          offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\n        }\n      }\n\n      // set width/height\n      element.style.height = Y - offsetTop + handleOffset + 'px';\n      element.style.width = X - offsetLeft + handleOffset + 'px';\n\n      // if the element being resized has a starting left, maintain it.\n      // the dialog is centered, divide by half the offset to maintain the margins.\n      if (!isNaN(startingLeft)) {\n        var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\n        if (isRTL) {\n          //negate the diff, why?\n          //when growing it should decrease left\n          //when shrinking it should increase left\n          diff *= -1;\n        }\n        if (element.offsetWidth > startingWidth) {\n          //growing\n          element.style.left = startingLeft + diff + 'px';\n        } else if (element.offsetWidth >= minWidth) {\n          //shrinking\n          element.style.left = startingLeft - diff + 'px';\n        }\n      }\n    }\n\n    /**\r\n     * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n     * Adds no-selection class to the body, disabling selection while moving.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance The dilog instance.\r\n     * \r\n     * @return {Boolean} false\r\n     */\n    function beginResize(event, instance) {\n      if (!instance.isMaximized()) {\n        var eventSrc;\n        if (event.type === 'touchstart') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n        if (eventSrc) {\n          // allow custom `onresize` method\n          dispatchEvent('onresize', instance);\n          resizable = instance;\n          handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\n          var element = instance.elements.dialog;\n          addClass(element, classes.capture);\n          startingLeft = parseInt(element.style.left, 10);\n          element.style.height = element.offsetHeight + 'px';\n          element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\n          element.style.width = (startingWidth = element.offsetWidth) + 'px';\n          if (element.style.maxWidth !== 'none') {\n            element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\n          }\n          element.style.maxWidth = 'none';\n          addClass(document.body, classes.noSelection);\n          return false;\n        }\n      }\n    }\n\n    /**\r\n     * The actual resize handler,  attached to document.body mousemove event.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function resize(event) {\n      if (resizable) {\n        var eventSrc;\n        if (event.type === 'touchmove') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n        if (eventSrc) {\n          resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\n        }\n      }\n    }\n\n    /**\r\n     * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n     * Removes no-selection class from document.body, allowing selection.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function endResize() {\n      if (resizable) {\n        var instance = resizable;\n        resizable = null;\n        removeClass(document.body, classes.noSelection);\n        removeClass(instance.elements.dialog, classes.capture);\n        cancelClick = true;\n        // allow custom `onresized` method\n        dispatchEvent('onresized', instance);\n      }\n    }\n\n    /**\r\n     * Resets any changes made by resizing the element to its original state.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function resetResize(instance) {\n      resizable = null;\n      var element = instance.elements.dialog;\n      if (element.style.maxWidth === 'none') {\n        //clear inline styles.\n        element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\n        //reset variables.\n        startingLeft = Number.Nan;\n        startingWidth = minWidth = handleOffset = 0;\n      }\n    }\n\n    /**\r\n     * Updates the dialog move behavior.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateResizable(instance) {\n      if (instance.get('resizable')) {\n        // add class\n        addClass(instance.elements.root, classes.resizable);\n        if (instance.isOpen()) {\n          bindResizableEvents(instance);\n        }\n      } else {\n        //reset\n        resetResize(instance);\n        // remove class\n        removeClass(instance.elements.root, classes.resizable);\n        if (instance.isOpen()) {\n          unbindResizableEvents(instance);\n        }\n      }\n    }\n\n    /**\r\n     * Reset move/resize on window resize.\r\n     *\r\n     * @param {Event} event\twindow resize event object.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function windowResize( /*event*/\n    ) {\n      for (var x = 0; x < openDialogs.length; x += 1) {\n        var instance = openDialogs[x];\n        if (instance.get('autoReset')) {\n          resetMove(instance);\n          resetResize(instance);\n        }\n      }\n    }\n    /**\r\n     * Bind dialogs events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindEvents(instance) {\n      // if first dialog, hook global handlers\n      if (openDialogs.length === 1) {\n        //global\n        on(window, 'resize', windowResize);\n        on(document.body, 'keyup', keyupHandler);\n        on(document.body, 'keydown', keydownHandler);\n        on(document.body, 'focus', onReset);\n\n        //move\n        on(document.documentElement, 'mousemove', move);\n        on(document.documentElement, 'touchmove', move, false, false);\n        on(document.documentElement, 'mouseup', endMove);\n        on(document.documentElement, 'touchend', endMove);\n        //resize\n        on(document.documentElement, 'mousemove', resize);\n        on(document.documentElement, 'touchmove', resize, false, false);\n        on(document.documentElement, 'mouseup', endResize);\n        on(document.documentElement, 'touchend', endResize);\n      }\n\n      // common events\n      on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\n      on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\n      on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\n      on(instance.elements.reset[0], 'keydown', recycleTab);\n      on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\n\n      //prevent handling key up when dialog is being opened by a key stroke.\n      cancelKeyup = true;\n      // hook in transition handler\n      on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\n\n      // modelss only events\n      if (!instance.get('modal')) {\n        bindModelessEvents(instance);\n      }\n\n      // resizable\n      if (instance.get('resizable')) {\n        bindResizableEvents(instance);\n      }\n\n      // movable\n      if (instance.get('movable')) {\n        bindMovableEvents(instance);\n      }\n    }\n\n    /**\r\n     * Unbind dialogs events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindEvents(instance) {\n      // if last dialog, remove global handlers\n      if (openDialogs.length === 1) {\n        //global\n        off(window, 'resize', windowResize);\n        off(document.body, 'keyup', keyupHandler);\n        off(document.body, 'keydown', keydownHandler);\n        off(document.body, 'focus', onReset);\n        //move\n        off(document.documentElement, 'mousemove', move);\n        off(document.documentElement, 'mouseup', endMove);\n        //resize\n        off(document.documentElement, 'mousemove', resize);\n        off(document.documentElement, 'mouseup', endResize);\n      }\n\n      // common events\n      off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\n      off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\n      off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\n      off(instance.elements.reset[0], 'keydown', recycleTab);\n      off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\n\n      // hook out transition handler\n      on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\n\n      // modelss only events\n      if (!instance.get('modal')) {\n        unbindModelessEvents(instance);\n      }\n\n      // movable\n      if (instance.get('movable')) {\n        unbindMovableEvents(instance);\n      }\n\n      // resizable\n      if (instance.get('resizable')) {\n        unbindResizableEvents(instance);\n      }\n    }\n\n    /**\r\n     * Bind modeless specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindModelessEvents(instance) {\n      on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\n    }\n\n    /**\r\n     * Unbind modeless specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindModelessEvents(instance) {\n      off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\n    }\n\n    /**\r\n     * Bind movable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindMovableEvents(instance) {\n      on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\n      on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\n    }\n\n    /**\r\n     * Unbind movable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindMovableEvents(instance) {\n      off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\n      off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\n    }\n\n    /**\r\n     * Bind resizable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindResizableEvents(instance) {\n      on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\n      on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\n    }\n\n    /**\r\n     * Unbind resizable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindResizableEvents(instance) {\n      off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\n      off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\n    }\n\n    /**\r\n     * Bind closable events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindClosableEvents(instance) {\n      on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\n    }\n\n    /**\r\n     * Unbind closable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindClosableEvents(instance) {\n      off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\n    }\n    // dialog API\n    return {\n      __init: initialize,\n      /**\r\n       * Check if dialog is currently open\r\n       *\r\n       * @return {Boolean}\r\n       */\n      isOpen: function () {\n        return this.__internal.isOpen;\n      },\n      isModal: function () {\n        return this.elements.root.className.indexOf(classes.modeless) < 0;\n      },\n      isMaximized: function () {\n        return this.elements.root.className.indexOf(classes.maximized) > -1;\n      },\n      isPinned: function () {\n        return this.elements.root.className.indexOf(classes.unpinned) < 0;\n      },\n      maximize: function () {\n        if (!this.isMaximized()) {\n          maximize(this);\n        }\n        return this;\n      },\n      restore: function () {\n        if (this.isMaximized()) {\n          restore(this);\n        }\n        return this;\n      },\n      pin: function () {\n        if (!this.isPinned()) {\n          pin(this);\n        }\n        return this;\n      },\n      unpin: function () {\n        if (this.isPinned()) {\n          unpin(this);\n        }\n        return this;\n      },\n      bringToFront: function () {\n        bringToFront(null, this);\n        return this;\n      },\n      /**\r\n       * Move the dialog to a specific x/y coordinates\r\n       *\r\n       * @param {Number} x    The new dialog x coordinate in pixels.\r\n       * @param {Number} y    The new dialog y coordinate in pixels.\r\n       *\r\n       * @return {Object} The dialog instance.\r\n       */\n      moveTo: function (x, y) {\n        if (!isNaN(x) && !isNaN(y)) {\n          // allow custom `onmove` method\n          dispatchEvent('onmove', this);\n          var element = this.elements.dialog,\n            current = element,\n            offsetLeft = 0,\n            offsetTop = 0;\n\n          //subtract existing left,top\n          if (element.style.left) {\n            offsetLeft -= parseInt(element.style.left, 10);\n          }\n          if (element.style.top) {\n            offsetTop -= parseInt(element.style.top, 10);\n          }\n          //calc offset\n          do {\n            offsetLeft += current.offsetLeft;\n            offsetTop += current.offsetTop;\n          } while (current = current.offsetParent);\n\n          //calc left, top\n          var left = x - offsetLeft;\n          var top = y - offsetTop;\n\n          //// rtl handling\n          if (isRightToLeft()) {\n            left *= -1;\n          }\n          element.style.left = left + 'px';\n          element.style.top = top + 'px';\n\n          // allow custom `onmoved` method\n          dispatchEvent('onmoved', this);\n        }\n        return this;\n      },\n      /**\r\n       * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n       * The dialog can be resized to:\r\n       *  A minimum width equal to the initial display width\r\n       *  A minimum height equal to the sum of header/footer heights.\r\n       *\r\n       *\r\n       * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n       * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n       *\r\n       * @return {Object} The dialog instance.\r\n       */\n      resizeTo: function (width, height) {\n        var w = parseFloat(width),\n          h = parseFloat(height),\n          regex = /(\\d*\\.\\d+|\\d+)%/;\n        if (!isNaN(w) && !isNaN(h) && this.get('resizable') === true) {\n          // allow custom `onresize` method\n          dispatchEvent('onresize', this);\n          if (('' + width).match(regex)) {\n            w = w / 100 * document.documentElement.clientWidth;\n          }\n          if (('' + height).match(regex)) {\n            h = h / 100 * document.documentElement.clientHeight;\n          }\n          var element = this.elements.dialog;\n          if (element.style.maxWidth !== 'none') {\n            element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\n          }\n          element.style.maxWidth = 'none';\n          element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\n          element.style.width = w + 'px';\n          element.style.height = h + 'px';\n\n          // allow custom `onresized` method\n          dispatchEvent('onresized', this);\n        }\n        return this;\n      },\n      /**\r\n       * Gets or Sets dialog settings/options \r\n       *\r\n       * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n       * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n       *\r\n       * @return {undefined}\r\n       */\n      setting: function (key, value) {\n        var self = this;\n        var result = update(this, this.__internal.options, function (k, o, n) {\n          optionUpdated(self, k, o, n);\n        }, key, value);\n        if (result.op === 'get') {\n          if (result.found) {\n            return result.value;\n          } else if (typeof this.settings !== 'undefined') {\n            return update(this, this.settings, this.settingUpdated || function () {}, key, value).value;\n          } else {\n            return undefined;\n          }\n        } else if (result.op === 'set') {\n          if (result.items.length > 0) {\n            var callback = this.settingUpdated || function () {};\n            for (var x = 0; x < result.items.length; x += 1) {\n              var item = result.items[x];\n              if (!item.found && typeof this.settings !== 'undefined') {\n                update(this, this.settings, callback, item.key, item.value);\n              }\n            }\n          }\n          return this;\n        }\n      },\n      /**\r\n       * [Alias] Sets dialog settings/options \r\n       */\n      set: function (key, value) {\n        this.setting(key, value);\n        return this;\n      },\n      /**\r\n       * [Alias] Gets dialog settings/options \r\n       */\n      get: function (key) {\n        return this.setting(key);\n      },\n      /**\r\n      * Sets dialog header\r\n      * @content {string or element}\r\n      *\r\n      * @return {undefined}\r\n      */\n      setHeader: function (content) {\n        if (typeof content === 'string') {\n          clearContents(this.elements.header);\n          this.elements.header.innerHTML = content;\n        } else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content) {\n          clearContents(this.elements.header);\n          this.elements.header.appendChild(content);\n        }\n        return this;\n      },\n      /**\r\n      * Sets dialog contents\r\n      * @content {string or element}\r\n      *\r\n      * @return {undefined}\r\n      */\n      setContent: function (content) {\n        if (typeof content === 'string') {\n          clearContents(this.elements.content);\n          this.elements.content.innerHTML = content;\n        } else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content) {\n          clearContents(this.elements.content);\n          this.elements.content.appendChild(content);\n        }\n        return this;\n      },\n      /**\r\n       * Show the dialog as modal\r\n       *\r\n       * @return {Object} the dialog instance.\r\n       */\n      showModal: function (className) {\n        return this.show(true, className);\n      },\n      /**\r\n       * Show the dialog\r\n       *\r\n       * @return {Object} the dialog instance.\r\n       */\n      show: function (modal, className) {\n        // ensure initialization\n        initialize(this);\n        if (!this.__internal.isOpen) {\n          // add to open dialogs\n          this.__internal.isOpen = true;\n          openDialogs.push(this);\n\n          // save last focused element\n          if (alertify.defaults.maintainFocus) {\n            this.__internal.activeElement = document.activeElement;\n          }\n\n          // set tabindex attribute on body element this allows script to give it focusable\n          if (!document.body.hasAttribute('tabindex')) {\n            document.body.setAttribute('tabindex', tabindex = '0');\n          }\n\n          //allow custom dom manipulation updates before showing the dialog.\n          if (typeof this.prepare === 'function') {\n            this.prepare();\n          }\n          bindEvents(this);\n          if (modal !== undefined) {\n            this.set('modal', modal);\n          }\n\n          //save scroll to prevent document jump\n          saveScrollPosition();\n          ensureNoOverflow();\n\n          // allow custom dialog class on show\n          if (typeof className === 'string' && className !== '') {\n            this.__internal.className = className;\n            addClass(this.elements.root, className);\n          }\n\n          // maximize if start maximized\n          if (this.get('startMaximized')) {\n            this.maximize();\n          } else if (this.isMaximized()) {\n            restore(this);\n          }\n          updateAbsPositionFix(this);\n          this.elements.root.removeAttribute('style');\n          removeClass(this.elements.root, classes.animationOut);\n          addClass(this.elements.root, classes.animationIn);\n\n          // set 1s fallback in case transition event doesn't fire\n          clearTimeout(this.__internal.timerIn);\n          this.__internal.timerIn = setTimeout(this.__internal.transitionInHandler, transition.supported ? 1000 : 100);\n          if (isSafari) {\n            // force desktop safari reflow\n            var root = this.elements.root;\n            root.style.display = 'none';\n            setTimeout(function () {\n              root.style.display = 'block';\n            }, 0);\n          }\n\n          //reflow\n          reflow = this.elements.root.offsetWidth;\n\n          // show dialog\n          removeClass(this.elements.root, classes.hidden);\n\n          //restore scroll to prevent document jump\n          restoreScrollPosition();\n\n          // internal on show event\n          if (typeof this.hooks.onshow === 'function') {\n            this.hooks.onshow.call(this);\n          }\n\n          // allow custom `onshow` method\n          dispatchEvent('onshow', this);\n        } else {\n          // reset move updates\n          resetMove(this);\n          // reset resize updates\n          resetResize(this);\n          // shake the dialog to indicate its already open\n          addClass(this.elements.dialog, classes.shake);\n          var self = this;\n          setTimeout(function () {\n            removeClass(self.elements.dialog, classes.shake);\n          }, 200);\n        }\n        return this;\n      },\n      /**\r\n       * Close the dialog\r\n       *\r\n       * @return {Object} The dialog instance\r\n       */\n      close: function () {\n        if (this.__internal.isOpen) {\n          // custom `onclosing` event\n          if (dispatchEvent('onclosing', this) !== false) {\n            unbindEvents(this);\n            removeClass(this.elements.root, classes.animationIn);\n            addClass(this.elements.root, classes.animationOut);\n\n            // set 1s fallback in case transition event doesn't fire\n            clearTimeout(this.__internal.timerOut);\n            this.__internal.timerOut = setTimeout(this.__internal.transitionOutHandler, transition.supported ? 1000 : 100);\n            // hide dialog\n            addClass(this.elements.root, classes.hidden);\n            //reflow\n            reflow = this.elements.modal.offsetWidth;\n\n            // return focus to the last active element\n            if (alertify.defaults.maintainFocus && this.__internal.activeElement) {\n              this.__internal.activeElement.focus();\n              this.__internal.activeElement = null;\n            }\n\n            // remove custom dialog class on hide\n            if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\n              removeClass(this.elements.root, this.__internal.className);\n            }\n\n            // internal on close event\n            if (typeof this.hooks.onclose === 'function') {\n              this.hooks.onclose.call(this);\n            }\n\n            // allow custom `onclose` method\n            dispatchEvent('onclose', this);\n\n            //remove from open dialogs\n            openDialogs.splice(openDialogs.indexOf(this), 1);\n            this.__internal.isOpen = false;\n            ensureNoOverflow();\n          }\n        }\n        // last dialog and tab index was set by us, remove it.\n        if (!openDialogs.length && tabindex === '0') {\n          document.body.removeAttribute('tabindex');\n        }\n        return this;\n      },\n      /**\r\n       * Close all open dialogs except this.\r\n       *\r\n       * @return {undefined}\r\n       */\n      closeOthers: function () {\n        alertify.closeAll(this);\n        return this;\n      },\n      /**\r\n       * Destroys this dialog instance\r\n       *\r\n       * @return {undefined}\r\n       */\n      destroy: function () {\n        if (this.__internal) {\n          if (this.__internal.isOpen) {\n            //mark dialog for destruction, this will be called on tranistionOut event.\n            this.__internal.destroy = function () {\n              destruct(this, initialize);\n            };\n            //close the dialog to unbind all events.\n            this.close();\n          } else if (!this.__internal.destroy) {\n            destruct(this, initialize);\n          }\n        }\n        return this;\n      }\n    };\n  }();\n  var notifier = function () {\n    var reflow,\n      element,\n      openInstances = [],\n      classes = defaults.notifier.classes,\n      baseClass = classes.base;\n    /**\r\n     * Helper: initializes the notifier instance\r\n     *\r\n     */\n    function initialize(instance) {\n      if (!instance.__internal) {\n        instance.__internal = {\n          position: alertify.defaults.notifier.position,\n          delay: alertify.defaults.notifier.delay\n        };\n        element = document.createElement('DIV');\n        var transitionOff = 'transitionOff' in defaults.notifier ? defaults.notifier.transitionOff : defaults.transitionOff;\n        if (transitionOff) {\n          baseClass = classes.base + ' ajs-no-transition';\n        }\n        updatePosition(instance);\n      }\n\n      //add to DOM tree.\n      if (element.parentNode !== document.body) {\n        document.body.appendChild(element);\n      }\n    }\n    function pushInstance(instance) {\n      instance.__internal.pushed = true;\n      openInstances.push(instance);\n    }\n    function popInstance(instance) {\n      openInstances.splice(openInstances.indexOf(instance), 1);\n      instance.__internal.pushed = false;\n    }\n    /**\r\n     * Helper: update the notifier instance position\r\n     *\r\n     */\n    function updatePosition(instance) {\n      element.className = baseClass;\n      switch (instance.__internal.position) {\n        case 'top-right':\n          addClass(element, classes.top + ' ' + classes.right);\n          break;\n        case 'top-left':\n          addClass(element, classes.top + ' ' + classes.left);\n          break;\n        case 'top-center':\n          addClass(element, classes.top + ' ' + classes.center);\n          break;\n        case 'bottom-left':\n          addClass(element, classes.bottom + ' ' + classes.left);\n          break;\n        case 'bottom-center':\n          addClass(element, classes.bottom + ' ' + classes.center);\n          break;\n        default:\n        case 'bottom-right':\n          addClass(element, classes.bottom + ' ' + classes.right);\n          break;\n      }\n    }\n\n    /**\r\n    * creates a new notification message\r\n    *\r\n    * @param  {DOMElement} message\tThe notifier message element\r\n    * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n    * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n    *\r\n    * @return {undefined}\r\n    */\n    function create(div, callback) {\n      function clickDelegate(event, instance) {\n        if (!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true') {\n          instance.dismiss(true);\n        }\n      }\n      function transitionDone(event, instance) {\n        // unbind event\n        off(instance.element, transition.type, transitionDone);\n        // remove the message\n        element.removeChild(instance.element);\n      }\n      function initialize(instance) {\n        if (!instance.__internal) {\n          instance.__internal = {\n            pushed: false,\n            delay: undefined,\n            timer: undefined,\n            clickHandler: undefined,\n            transitionEndHandler: undefined,\n            transitionTimeout: undefined\n          };\n          instance.__internal.clickHandler = delegate(instance, clickDelegate);\n          instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\n        }\n        return instance;\n      }\n      function clearTimers(instance) {\n        clearTimeout(instance.__internal.timer);\n        clearTimeout(instance.__internal.transitionTimeout);\n      }\n      return initialize({\n        /* notification DOM element*/\n        element: div,\n        /*\r\n         * Pushes a notification message\r\n         * @param {string or DOMElement} content The notification message content\r\n         * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n         *\r\n         */\n        push: function (_content, _wait) {\n          if (!this.__internal.pushed) {\n            pushInstance(this);\n            clearTimers(this);\n            var content, wait;\n            switch (arguments.length) {\n              case 0:\n                wait = this.__internal.delay;\n                break;\n              case 1:\n                if (typeof _content === 'number') {\n                  wait = _content;\n                } else {\n                  content = _content;\n                  wait = this.__internal.delay;\n                }\n                break;\n              case 2:\n                content = _content;\n                wait = _wait;\n                break;\n            }\n            this.__internal.closeButton = alertify.defaults.notifier.closeButton;\n            // set contents\n            if (typeof content !== 'undefined') {\n              this.setContent(content);\n            }\n            // append or insert\n            if (notifier.__internal.position.indexOf('top') < 0) {\n              element.appendChild(this.element);\n            } else {\n              element.insertBefore(this.element, element.firstChild);\n            }\n            reflow = this.element.offsetWidth;\n            addClass(this.element, classes.visible);\n            // attach click event\n            on(this.element, 'click', this.__internal.clickHandler);\n            return this.delay(wait);\n          }\n          return this;\n        },\n        /*\r\n         * {Function} callback function to be invoked before dismissing the notification message.\r\n         * Remarks: A return value === 'false' will cancel the dismissal\r\n         *\r\n         */\n        ondismiss: function () {},\n        /*\r\n         * {Function} callback function to be invoked when the message is dismissed.\r\n         *\r\n         */\n        callback: callback,\n        /*\r\n         * Dismisses the notification message\r\n         * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n         *\r\n         */\n        dismiss: function (clicked) {\n          if (this.__internal.pushed) {\n            clearTimers(this);\n            if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\n              //detach click event\n              off(this.element, 'click', this.__internal.clickHandler);\n              // ensure element exists\n              if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\n                //transition end or fallback\n                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\n                removeClass(this.element, classes.visible);\n\n                // custom callback on dismiss\n                if (typeof this.callback === 'function') {\n                  this.callback.call(this, clicked);\n                }\n              }\n              popInstance(this);\n            }\n          }\n          return this;\n        },\n        /*\r\n         * Delays the notification message dismissal\r\n         * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n         *\r\n         */\n        delay: function (wait) {\n          clearTimers(this);\n          this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\n          if (this.__internal.delay > 0) {\n            var self = this;\n            this.__internal.timer = setTimeout(function () {\n              self.dismiss();\n            }, this.__internal.delay * 1000);\n          }\n          return this;\n        },\n        /*\r\n         * Sets the notification message contents\r\n         * @param {string or DOMElement} content The notification message content\r\n         *\r\n         */\n        setContent: function (content) {\n          if (typeof content === 'string') {\n            clearContents(this.element);\n            this.element.innerHTML = content;\n          } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\n            clearContents(this.element);\n            this.element.appendChild(content);\n          }\n          if (this.__internal.closeButton) {\n            var close = document.createElement('span');\n            addClass(close, classes.close);\n            close.setAttribute('data-close', true);\n            this.element.appendChild(close);\n          }\n          return this;\n        },\n        /*\r\n         * Dismisses all open notifications except this.\r\n         *\r\n         */\n        dismissOthers: function () {\n          notifier.dismissAll(this);\n          return this;\n        }\n      });\n    }\n\n    //notifier api\n    return {\n      /**\r\n       * Gets or Sets notifier settings.\r\n       *\r\n       * @param {string} key The setting name\r\n       * @param {Variant} value The setting value.\r\n       *\r\n       * @return {Object}\tif the called as a setter, return the notifier instance.\r\n       */\n      setting: function (key, value) {\n        //ensure init\n        initialize(this);\n        if (typeof value === 'undefined') {\n          //get\n          return this.__internal[key];\n        } else {\n          //set\n          switch (key) {\n            case 'position':\n              this.__internal.position = value;\n              updatePosition(this);\n              break;\n            case 'delay':\n              this.__internal.delay = value;\n              break;\n          }\n        }\n        return this;\n      },\n      /**\r\n       * [Alias] Sets dialog settings/options\r\n       */\n      set: function (key, value) {\n        this.setting(key, value);\n        return this;\n      },\n      /**\r\n       * [Alias] Gets dialog settings/options\r\n       */\n      get: function (key) {\n        return this.setting(key);\n      },\n      /**\r\n       * Creates a new notification message\r\n       *\r\n       * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n       * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n       *\r\n       * @return {undefined}\r\n       */\n      create: function (type, callback) {\n        //ensure notifier init\n        initialize(this);\n        //create new notification message\n        var div = document.createElement('div');\n        div.className = classes.message + (typeof type === 'string' && type !== '' ? ' ' + classes.prefix + type : '');\n        return create(div, callback);\n      },\n      /**\r\n       * Dismisses all open notifications.\r\n       *\r\n       * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n       *\r\n       */\n      dismissAll: function (except) {\n        var clone = openInstances.slice(0);\n        for (var x = 0; x < clone.length; x += 1) {\n          var instance = clone[x];\n          if (except === undefined || except !== instance) {\n            instance.dismiss();\n          }\n        }\n      }\n    };\n  }();\n\n  /**\r\n   * Alertify public API\r\n   * This contains everything that is exposed through the alertify object.\r\n   *\r\n   * @return {Object}\r\n   */\n  function Alertify() {\n    // holds a references of created dialogs\n    var dialogs = {};\n\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\n    function extend(sub, base) {\n      // copy dialog pototype over definition.\n      for (var prop in base) {\n        if (base.hasOwnProperty(prop)) {\n          sub[prop] = base[prop];\n        }\n      }\n      return sub;\n    }\n\n    /**\r\n    * Helper: returns a dialog instance from saved dialogs.\r\n    * and initializes the dialog if its not already initialized.\r\n    *\r\n    * @name {String} name The dialog name.\r\n    *\r\n    * @return {Object} The dialog instance.\r\n    */\n    function get_dialog(name) {\n      var dialog = dialogs[name].dialog;\n      //initialize the dialog if its not already initialized.\n      if (dialog && typeof dialog.__init === 'function') {\n        dialog.__init(dialog);\n      }\n      return dialog;\n    }\n\n    /**\r\n     * Helper:  registers a new dialog definition.\r\n     *\r\n     * @name {String} name The dialog name.\r\n     * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n     * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n     * @base {String} base the name of another dialog to inherit from.\r\n     *\r\n     * @return {Object} The dialog definition.\r\n     */\n    function register(name, Factory, transient, base) {\n      var definition = {\n        dialog: null,\n        factory: Factory\n      };\n\n      //if this is based on an existing dialog, create a new definition\n      //by applying the new protoype over the existing one.\n      if (base !== undefined) {\n        definition.factory = function () {\n          return extend(new dialogs[base].factory(), new Factory());\n        };\n      }\n      if (!transient) {\n        //create a new definition based on dialog\n        definition.dialog = extend(new definition.factory(), dialog);\n      }\n      return dialogs[name] = definition;\n    }\n    return {\n      /**\r\n       * Alertify defaults\r\n       * \r\n       * @type {Object}\r\n       */\n      defaults: defaults,\n      /**\r\n       * Dialogs factory \r\n       *\r\n       * @param {string}      Dialog name.\r\n       * @param {Function}    A Dialog factory function.\r\n       * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n       * @param {String}      The name of the base type to inherit from.\r\n       */\n      dialog: function (name, Factory, transient, base) {\n        // get request, create a new instance and return it.\n        if (typeof Factory !== 'function') {\n          return get_dialog(name);\n        }\n        if (this.hasOwnProperty(name)) {\n          throw new Error('alertify.dialog: name already exists');\n        }\n\n        // register the dialog\n        var definition = register(name, Factory, transient, base);\n        if (transient) {\n          // make it public\n          this[name] = function () {\n            //if passed with no params, consider it a get request\n            if (arguments.length === 0) {\n              return definition.dialog;\n            } else {\n              var instance = extend(new definition.factory(), dialog);\n              //ensure init\n              if (instance && typeof instance.__init === 'function') {\n                instance.__init(instance);\n              }\n              instance['main'].apply(instance, arguments);\n              return instance['show'].apply(instance);\n            }\n          };\n        } else {\n          // make it public\n          this[name] = function () {\n            //ensure init\n            if (definition.dialog && typeof definition.dialog.__init === 'function') {\n              definition.dialog.__init(definition.dialog);\n            }\n            //if passed with no params, consider it a get request\n            if (arguments.length === 0) {\n              return definition.dialog;\n            } else {\n              var dialog = definition.dialog;\n              dialog['main'].apply(definition.dialog, arguments);\n              return dialog['show'].apply(definition.dialog);\n            }\n          };\n        }\n      },\n      /**\r\n       * Close all open dialogs.\r\n       *\r\n       * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n       *\r\n       * @return {undefined}\r\n       */\n      closeAll: function (except) {\n        var clone = openDialogs.slice(0);\n        for (var x = 0; x < clone.length; x += 1) {\n          var instance = clone[x];\n          if (except === undefined || except !== instance) {\n            instance.close();\n          }\n        }\n      },\n      /**\r\n       * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n       *\r\n       * @param {string} name The dialog name.\r\n       * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n       * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n       *\r\n       * @return {undefined}\r\n       */\n      setting: function (name, key, value) {\n        if (name === 'notifier') {\n          return notifier.setting(key, value);\n        }\n        var dialog = get_dialog(name);\n        if (dialog) {\n          return dialog.setting(key, value);\n        }\n      },\n      /**\r\n       * [Alias] Sets dialog settings/options \r\n       */\n      set: function (name, key, value) {\n        return this.setting(name, key, value);\n      },\n      /**\r\n       * [Alias] Gets dialog settings/options \r\n       */\n      get: function (name, key) {\n        return this.setting(name, key);\n      },\n      /**\r\n       * Creates a new notification message.\r\n       * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n       * This allows for custom look and feel for various types of notifications.\r\n       *\r\n       * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n       * @param  {String}                 [type='']\t\t\t\tType of log message\r\n       * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      notify: function (message, type, wait, callback) {\n        return notifier.create(type, callback).push(message, wait);\n      },\n      /**\r\n       * Creates a new notification message.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      message: function (message, wait, callback) {\n        return notifier.create(null, callback).push(message, wait);\n      },\n      /**\r\n       * Creates a new notification message of type 'success'.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      success: function (message, wait, callback) {\n        return notifier.create('success', callback).push(message, wait);\n      },\n      /**\r\n       * Creates a new notification message of type 'error'.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      error: function (message, wait, callback) {\n        return notifier.create('error', callback).push(message, wait);\n      },\n      /**\r\n       * Creates a new notification message of type 'warning'.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      warning: function (message, wait, callback) {\n        return notifier.create('warning', callback).push(message, wait);\n      },\n      /**\r\n       * Dismisses all open notifications\r\n       *\r\n       * @return {undefined}\r\n       */\n      dismissAll: function () {\n        notifier.dismissAll();\n      }\n    };\n  }\n  var alertify = new Alertify();\n\n  /**\r\n  * Alert dialog definition\r\n  *\r\n  * invoked by:\r\n  *\talertify.alert(message);\r\n  *\talertify.alert(title, message);\r\n  *\talertify.alert(message, onok);\r\n  *\talertify.alert(title, message, onok);\r\n   */\n  alertify.dialog('alert', function () {\n    return {\n      main: function (_title, _message, _onok) {\n        var title, message, onok;\n        switch (arguments.length) {\n          case 1:\n            message = _title;\n            break;\n          case 2:\n            if (typeof _message === 'function') {\n              message = _title;\n              onok = _message;\n            } else {\n              title = _title;\n              message = _message;\n            }\n            break;\n          case 3:\n            title = _title;\n            message = _message;\n            onok = _onok;\n            break;\n        }\n        this.set('title', title);\n        this.set('message', message);\n        this.set('onok', onok);\n        return this;\n      },\n      setup: function () {\n        return {\n          buttons: [{\n            text: alertify.defaults.glossary.ok,\n            key: keys.ESC,\n            invokeOnClose: true,\n            className: alertify.defaults.theme.ok\n          }],\n          focus: {\n            element: 0,\n            select: false\n          },\n          options: {\n            maximizable: false,\n            resizable: false\n          }\n        };\n      },\n      build: function () {\n        // nothing\n      },\n      prepare: function () {\n        //nothing\n      },\n      setMessage: function (message) {\n        this.setContent(message);\n      },\n      settings: {\n        message: undefined,\n        onok: undefined,\n        label: undefined\n      },\n      settingUpdated: function (key, oldValue, newValue) {\n        switch (key) {\n          case 'message':\n            this.setMessage(newValue);\n            break;\n          case 'label':\n            if (this.__internal.buttons[0].element) {\n              this.__internal.buttons[0].element.innerHTML = newValue;\n            }\n            break;\n        }\n      },\n      callback: function (closeEvent) {\n        if (typeof this.get('onok') === 'function') {\n          var returnValue = this.get('onok').call(this, closeEvent);\n          if (typeof returnValue !== 'undefined') {\n            closeEvent.cancel = !returnValue;\n          }\n        }\n      }\n    };\n  });\n  /**\r\n   * Confirm dialog object\r\n   *\r\n   *\talertify.confirm(message);\r\n   *\talertify.confirm(message, onok);\r\n   *\talertify.confirm(message, onok, oncancel);\r\n   *\talertify.confirm(title, message, onok, oncancel);\r\n   */\n  alertify.dialog('confirm', function () {\n    var autoConfirm = {\n      timer: null,\n      index: null,\n      text: null,\n      duration: null,\n      task: function (event, self) {\n        if (self.isOpen()) {\n          self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\n          autoConfirm.duration -= 1;\n          if (autoConfirm.duration === -1) {\n            clearAutoConfirm(self);\n            var button = self.__internal.buttons[autoConfirm.index];\n            var closeEvent = createCloseEvent(autoConfirm.index, button);\n            if (typeof self.callback === 'function') {\n              self.callback.apply(self, [closeEvent]);\n            }\n            //close the dialog.\n            if (closeEvent.close !== false) {\n              self.close();\n            }\n          }\n        } else {\n          clearAutoConfirm(self);\n        }\n      }\n    };\n    function clearAutoConfirm(self) {\n      if (autoConfirm.timer !== null) {\n        clearInterval(autoConfirm.timer);\n        autoConfirm.timer = null;\n        self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\n      }\n    }\n    function startAutoConfirm(self, index, duration) {\n      clearAutoConfirm(self);\n      autoConfirm.duration = duration;\n      autoConfirm.index = index;\n      autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\n      autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\n      autoConfirm.task(null, self);\n    }\n    return {\n      main: function (_title, _message, _onok, _oncancel) {\n        var title, message, onok, oncancel;\n        switch (arguments.length) {\n          case 1:\n            message = _title;\n            break;\n          case 2:\n            message = _title;\n            onok = _message;\n            break;\n          case 3:\n            message = _title;\n            onok = _message;\n            oncancel = _onok;\n            break;\n          case 4:\n            title = _title;\n            message = _message;\n            onok = _onok;\n            oncancel = _oncancel;\n            break;\n        }\n        this.set('title', title);\n        this.set('message', message);\n        this.set('onok', onok);\n        this.set('oncancel', oncancel);\n        return this;\n      },\n      setup: function () {\n        return {\n          buttons: [{\n            text: alertify.defaults.glossary.ok,\n            key: keys.ENTER,\n            className: alertify.defaults.theme.ok\n          }, {\n            text: alertify.defaults.glossary.cancel,\n            key: keys.ESC,\n            invokeOnClose: true,\n            className: alertify.defaults.theme.cancel\n          }],\n          focus: {\n            element: 0,\n            select: false\n          },\n          options: {\n            maximizable: false,\n            resizable: false\n          }\n        };\n      },\n      build: function () {\n        //nothing\n      },\n      prepare: function () {\n        //nothing\n      },\n      setMessage: function (message) {\n        this.setContent(message);\n      },\n      settings: {\n        message: null,\n        labels: null,\n        onok: null,\n        oncancel: null,\n        defaultFocus: null,\n        reverseButtons: null\n      },\n      settingUpdated: function (key, oldValue, newValue) {\n        switch (key) {\n          case 'message':\n            this.setMessage(newValue);\n            break;\n          case 'labels':\n            if ('ok' in newValue && this.__internal.buttons[0].element) {\n              this.__internal.buttons[0].text = newValue.ok;\n              this.__internal.buttons[0].element.innerHTML = newValue.ok;\n            }\n            if ('cancel' in newValue && this.__internal.buttons[1].element) {\n              this.__internal.buttons[1].text = newValue.cancel;\n              this.__internal.buttons[1].element.innerHTML = newValue.cancel;\n            }\n            break;\n          case 'reverseButtons':\n            if (newValue === true) {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\n            } else {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\n            }\n            break;\n          case 'defaultFocus':\n            this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\n            break;\n        }\n      },\n      callback: function (closeEvent) {\n        clearAutoConfirm(this);\n        var returnValue;\n        switch (closeEvent.index) {\n          case 0:\n            if (typeof this.get('onok') === 'function') {\n              returnValue = this.get('onok').call(this, closeEvent);\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n            break;\n          case 1:\n            if (typeof this.get('oncancel') === 'function') {\n              returnValue = this.get('oncancel').call(this, closeEvent);\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n            break;\n        }\n      },\n      autoOk: function (duration) {\n        startAutoConfirm(this, 0, duration);\n        return this;\n      },\n      autoCancel: function (duration) {\n        startAutoConfirm(this, 1, duration);\n        return this;\n      }\n    };\n  });\n  /**\r\n   * Prompt dialog object\r\n   *\r\n   * invoked by:\r\n   *\talertify.prompt(message);\r\n   *\talertify.prompt(message, value);\r\n   *\talertify.prompt(message, value, onok);\r\n   *\talertify.prompt(message, value, onok, oncancel);\r\n   *\talertify.prompt(title, message, value, onok, oncancel);\r\n   */\n  alertify.dialog('prompt', function () {\n    var input = document.createElement('INPUT');\n    var p = document.createElement('P');\n    return {\n      main: function (_title, _message, _value, _onok, _oncancel) {\n        var title, message, value, onok, oncancel;\n        switch (arguments.length) {\n          case 1:\n            message = _title;\n            break;\n          case 2:\n            message = _title;\n            value = _message;\n            break;\n          case 3:\n            message = _title;\n            value = _message;\n            onok = _value;\n            break;\n          case 4:\n            message = _title;\n            value = _message;\n            onok = _value;\n            oncancel = _onok;\n            break;\n          case 5:\n            title = _title;\n            message = _message;\n            value = _value;\n            onok = _onok;\n            oncancel = _oncancel;\n            break;\n        }\n        this.set('title', title);\n        this.set('message', message);\n        this.set('value', value);\n        this.set('onok', onok);\n        this.set('oncancel', oncancel);\n        return this;\n      },\n      setup: function () {\n        return {\n          buttons: [{\n            text: alertify.defaults.glossary.ok,\n            key: keys.ENTER,\n            className: alertify.defaults.theme.ok\n          }, {\n            text: alertify.defaults.glossary.cancel,\n            key: keys.ESC,\n            invokeOnClose: true,\n            className: alertify.defaults.theme.cancel\n          }],\n          focus: {\n            element: input,\n            select: true\n          },\n          options: {\n            maximizable: false,\n            resizable: false\n          }\n        };\n      },\n      build: function () {\n        input.className = alertify.defaults.theme.input;\n        input.setAttribute('type', 'text');\n        input.value = this.get('value');\n        this.elements.content.appendChild(p);\n        this.elements.content.appendChild(input);\n      },\n      prepare: function () {\n        //nothing\n      },\n      setMessage: function (message) {\n        if (typeof message === 'string') {\n          clearContents(p);\n          p.innerHTML = message;\n        } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\n          clearContents(p);\n          p.appendChild(message);\n        }\n      },\n      settings: {\n        message: undefined,\n        labels: undefined,\n        onok: undefined,\n        oncancel: undefined,\n        value: '',\n        type: 'text',\n        reverseButtons: undefined\n      },\n      settingUpdated: function (key, oldValue, newValue) {\n        switch (key) {\n          case 'message':\n            this.setMessage(newValue);\n            break;\n          case 'value':\n            input.value = newValue;\n            break;\n          case 'type':\n            switch (newValue) {\n              case 'text':\n              case 'color':\n              case 'date':\n              case 'datetime-local':\n              case 'email':\n              case 'month':\n              case 'number':\n              case 'password':\n              case 'search':\n              case 'tel':\n              case 'time':\n              case 'week':\n                input.type = newValue;\n                break;\n              default:\n                input.type = 'text';\n                break;\n            }\n            break;\n          case 'labels':\n            if (newValue.ok && this.__internal.buttons[0].element) {\n              this.__internal.buttons[0].element.innerHTML = newValue.ok;\n            }\n            if (newValue.cancel && this.__internal.buttons[1].element) {\n              this.__internal.buttons[1].element.innerHTML = newValue.cancel;\n            }\n            break;\n          case 'reverseButtons':\n            if (newValue === true) {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\n            } else {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\n            }\n            break;\n        }\n      },\n      callback: function (closeEvent) {\n        var returnValue;\n        switch (closeEvent.index) {\n          case 0:\n            this.settings.value = input.value;\n            if (typeof this.get('onok') === 'function') {\n              returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n            break;\n          case 1:\n            if (typeof this.get('oncancel') === 'function') {\n              returnValue = this.get('oncancel').call(this, closeEvent);\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n            if (!closeEvent.cancel) {\n              input.value = this.settings.value;\n            }\n            break;\n        }\n      }\n    };\n  });\n\n  // CommonJS\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = alertify;\n    // AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return alertify;\n    });\n    // window\n  } else if (!window.alertify) {\n    window.alertify = alertify;\n  }\n})(typeof window !== 'undefined' ? window : this);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}