{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, Directive, Input, HostBinding, HostListener, Optional, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nconst CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n/**\n * Add checkbox functionality to any element\n */\nlet ButtonCheckboxDirective = /*#__PURE__*/(() => {\n  class ButtonCheckboxDirective {\n    constructor() {\n      /** Truthy value, will be set to ngModel */\n      this.btnCheckboxTrue = true;\n      /** Falsy value, will be set to ngModel */\n      this.btnCheckboxFalse = false;\n      this.state = false;\n      this.isDisabled = false;\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n    }\n    // view -> model\n    onClick() {\n      if (this.isDisabled) {\n        return;\n      }\n      this.toggle(!this.state);\n      this.onChange(this.value);\n    }\n    ngOnInit() {\n      this.toggle(this.trueValue === this.value);\n    }\n    get trueValue() {\n      return typeof this.btnCheckboxTrue !== 'undefined' ? this.btnCheckboxTrue : true;\n    }\n    get falseValue() {\n      return typeof this.btnCheckboxFalse !== 'undefined' ? this.btnCheckboxFalse : false;\n    }\n    toggle(state) {\n      this.state = state;\n      this.value = this.state ? this.trueValue : this.falseValue;\n    }\n    // ControlValueAccessor\n    // model -> view\n    writeValue(value) {\n      this.state = this.trueValue === value;\n      this.value = value ? this.trueValue : this.falseValue;\n    }\n    setDisabledState(isDisabled) {\n      this.isDisabled = isDisabled;\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    static #_ = this.ɵfac = function ButtonCheckboxDirective_Factory(t) {\n      return new (t || ButtonCheckboxDirective)();\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ButtonCheckboxDirective,\n      selectors: [[\"\", \"btnCheckbox\", \"\"]],\n      hostVars: 3,\n      hostBindings: function ButtonCheckboxDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function ButtonCheckboxDirective_click_HostBindingHandler() {\n            return ctx.onClick();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"aria-pressed\", ctx.state);\n          i0.ɵɵclassProp(\"active\", ctx.state);\n        }\n      },\n      inputs: {\n        btnCheckboxTrue: \"btnCheckboxTrue\",\n        btnCheckboxFalse: \"btnCheckboxFalse\"\n      },\n      features: [i0.ɵɵProvidersFeature([CHECKBOX_CONTROL_VALUE_ACCESSOR])]\n    });\n  }\n  return ButtonCheckboxDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst RADIO_CONTROL_VALUE_ACCESSOR$1 = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nlet ButtonRadioDirective = /*#__PURE__*/(() => {\n  class ButtonRadioDirective {\n    /** Current value of radio component or group */\n    get value() {\n      return this.group ? this.group.value : this._value;\n    }\n    set value(value) {\n      if (this.group) {\n        this.group.value = value;\n        return;\n      }\n      this._value = value;\n      this._onChange(value);\n    }\n    /** If `true` — radio button is disabled */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(disabled) {\n      this.setDisabledState(disabled);\n    }\n    get controlOrGroupDisabled() {\n      return this.disabled || this.group && this.group.disabled ? true : undefined;\n    }\n    get hasDisabledClass() {\n      // Although the radio is disabled the active radio should still stand out.\n      // The disabled class will prevent this so don't add it on the active radio\n      return this.controlOrGroupDisabled && !this.isActive;\n    }\n    get isActive() {\n      return this.btnRadio === this.value;\n    }\n    get tabindex() {\n      if (this.controlOrGroupDisabled) {\n        // Disabled radio buttons should not receive focus\n        return undefined;\n      } else if (this.isActive || this.group == null) {\n        return 0;\n      } else {\n        return -1;\n      }\n    }\n    get hasFocus() {\n      return this._hasFocus;\n    }\n    constructor(el, cdr, renderer, group) {\n      this.el = el;\n      this.cdr = cdr;\n      this.renderer = renderer;\n      this.group = group;\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n      /** If `true` — radio button can be unchecked */\n      this.uncheckable = false;\n      this.role = 'radio';\n      this._disabled = false;\n      this._hasFocus = false;\n    }\n    toggleIfAllowed() {\n      if (!this.canToggle()) {\n        return;\n      }\n      if (this.uncheckable && this.btnRadio === this.value) {\n        this.value = undefined;\n      } else {\n        this.value = this.btnRadio;\n      }\n    }\n    onSpacePressed(event) {\n      this.toggleIfAllowed();\n      event.preventDefault();\n    }\n    focus() {\n      this.el.nativeElement.focus();\n    }\n    onFocus() {\n      this._hasFocus = true;\n    }\n    onBlur() {\n      this._hasFocus = false;\n      this.onTouched();\n    }\n    canToggle() {\n      return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\n    }\n    ngOnChanges(changes) {\n      if ('uncheckable' in changes) {\n        this.uncheckable = this.uncheckable !== false && typeof this.uncheckable !== 'undefined';\n      }\n    }\n    _onChange(value) {\n      if (this.group) {\n        this.group.value = value;\n        return;\n      }\n      this.onTouched();\n      this.onChange(value);\n    }\n    // ControlValueAccessor\n    // model -> view\n    writeValue(value) {\n      this.value = value;\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(disabled) {\n      this._disabled = disabled;\n      if (disabled) {\n        this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n        return;\n      }\n      this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n    }\n    static #_ = this.ɵfac = function ButtonRadioDirective_Factory(t) {\n      return new (t || ButtonRadioDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(forwardRef(() => ButtonRadioGroupDirective), 8));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ButtonRadioDirective,\n      selectors: [[\"\", \"btnRadio\", \"\"]],\n      hostVars: 8,\n      hostBindings: function ButtonRadioDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function ButtonRadioDirective_click_HostBindingHandler() {\n            return ctx.toggleIfAllowed();\n          })(\"keydown.space\", function ButtonRadioDirective_keydown_space_HostBindingHandler($event) {\n            return ctx.onSpacePressed($event);\n          })(\"focus\", function ButtonRadioDirective_focus_HostBindingHandler() {\n            return ctx.onFocus();\n          })(\"blur\", function ButtonRadioDirective_blur_HostBindingHandler() {\n            return ctx.onBlur();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"aria-disabled\", ctx.controlOrGroupDisabled)(\"aria-checked\", ctx.isActive)(\"role\", ctx.role)(\"tabindex\", ctx.tabindex);\n          i0.ɵɵclassProp(\"disabled\", ctx.hasDisabledClass)(\"active\", ctx.isActive);\n        }\n      },\n      inputs: {\n        btnRadio: \"btnRadio\",\n        uncheckable: \"uncheckable\",\n        value: \"value\",\n        disabled: \"disabled\"\n      },\n      features: [i0.ɵɵProvidersFeature([RADIO_CONTROL_VALUE_ACCESSOR$1]), i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return ButtonRadioDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst RADIO_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nlet ButtonRadioGroupDirective = /*#__PURE__*/(() => {\n  class ButtonRadioGroupDirective {\n    constructor(cdr) {\n      this.cdr = cdr;\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n      this.role = 'radiogroup';\n      this._disabled = false;\n    }\n    get value() {\n      return this._value;\n    }\n    set value(value) {\n      this._value = value;\n      this.onChange(value);\n    }\n    get disabled() {\n      return this._disabled;\n    }\n    get tabindex() {\n      if (this._disabled) {\n        return null;\n      } else {\n        return 0;\n      }\n    }\n    writeValue(value) {\n      this._value = value;\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(disabled) {\n      if (this.radioButtons) {\n        this._disabled = disabled;\n        this.radioButtons.forEach(buttons => {\n          buttons.setDisabledState(disabled);\n        });\n        this.cdr.markForCheck();\n      }\n    }\n    onFocus() {\n      if (this._disabled) {\n        return;\n      }\n      const activeRadio = this.getActiveOrFocusedRadio();\n      if (activeRadio) {\n        activeRadio.focus();\n        return;\n      }\n      if (this.radioButtons) {\n        const firstEnabled = this.radioButtons.find(r => !r.disabled);\n        if (firstEnabled) {\n          firstEnabled.focus();\n        }\n      }\n    }\n    onBlur() {\n      if (this.onTouched) {\n        this.onTouched();\n      }\n    }\n    selectNext(event) {\n      this.selectInDirection('next');\n      event.preventDefault();\n    }\n    selectPrevious(event) {\n      this.selectInDirection('previous');\n      event.preventDefault();\n    }\n    selectInDirection(direction) {\n      if (this._disabled) {\n        return;\n      }\n      function nextIndex(currentIndex, buttonRadioDirectives) {\n        const step = direction === 'next' ? 1 : -1;\n        let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\n        if (calcIndex < 0) {\n          calcIndex = buttonRadioDirectives.length - 1;\n        }\n        return calcIndex;\n      }\n      const activeRadio = this.getActiveOrFocusedRadio();\n      if (activeRadio && this.radioButtons) {\n        const buttonRadioDirectives = this.radioButtons.toArray();\n        const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\n        for (let i = nextIndex(currentActiveIndex, buttonRadioDirectives); i !== currentActiveIndex; i = nextIndex(i, buttonRadioDirectives)) {\n          if (buttonRadioDirectives[i].canToggle()) {\n            buttonRadioDirectives[i].toggleIfAllowed();\n            buttonRadioDirectives[i].focus();\n            break;\n          }\n        }\n      }\n    }\n    getActiveOrFocusedRadio() {\n      if (!this.radioButtons) {\n        return void 0;\n      }\n      return this.radioButtons.find(button => button.isActive) || this.radioButtons.find(button => button.hasFocus);\n    }\n    static #_ = this.ɵfac = function ButtonRadioGroupDirective_Factory(t) {\n      return new (t || ButtonRadioGroupDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ButtonRadioGroupDirective,\n      selectors: [[\"\", \"btnRadioGroup\", \"\"]],\n      contentQueries: function ButtonRadioGroupDirective_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, ButtonRadioDirective, 4);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radioButtons = _t);\n        }\n      },\n      hostVars: 2,\n      hostBindings: function ButtonRadioGroupDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focus\", function ButtonRadioGroupDirective_focus_HostBindingHandler() {\n            return ctx.onFocus();\n          })(\"blur\", function ButtonRadioGroupDirective_blur_HostBindingHandler() {\n            return ctx.onBlur();\n          })(\"keydown.ArrowRight\", function ButtonRadioGroupDirective_keydown_ArrowRight_HostBindingHandler($event) {\n            return ctx.selectNext($event);\n          })(\"keydown.ArrowDown\", function ButtonRadioGroupDirective_keydown_ArrowDown_HostBindingHandler($event) {\n            return ctx.selectNext($event);\n          })(\"keydown.ArrowLeft\", function ButtonRadioGroupDirective_keydown_ArrowLeft_HostBindingHandler($event) {\n            return ctx.selectPrevious($event);\n          })(\"keydown.ArrowUp\", function ButtonRadioGroupDirective_keydown_ArrowUp_HostBindingHandler($event) {\n            return ctx.selectPrevious($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx.tabindex);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([RADIO_CONTROL_VALUE_ACCESSOR])]\n    });\n  }\n  return ButtonRadioGroupDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ButtonsModule = /*#__PURE__*/(() => {\n  class ButtonsModule {\n    static forRoot() {\n      return {\n        ngModule: ButtonsModule,\n        providers: []\n      };\n    }\n    static #_ = this.ɵfac = function ButtonsModule_Factory(t) {\n      return new (t || ButtonsModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ButtonsModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return ButtonsModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective, ButtonsModule };\n//# sourceMappingURL=ngx-bootstrap-buttons.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}