{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { catchError, concatMap, retryWhen } from 'rxjs/operators';\nimport { ErrorCode } from '../enums/enums';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./alertify.service\";\nexport let HttpErrorInterceptorService = /*#__PURE__*/(() => {\n  class HttpErrorInterceptorService {\n    constructor(alertify) {\n      this.alertify = alertify;\n    }\n    intercept(request, next) {\n      console.log('HTTP Request started');\n      return next.handle(request).pipe(retryWhen(error => this.retryRequest(error, 10)), catchError(error => {\n        const errorMessage = this.setError(error);\n        console.log(error);\n        this.alertify.error(errorMessage);\n        return throwError(errorMessage);\n      }));\n    }\n    // Retry the request in case of errror\n    retryRequest(error, retryCount) {\n      return error.pipe(concatMap((checkErr, count) => {\n        if (count <= retryCount) {\n          switch (checkErr.status) {\n            case ErrorCode.serverDown:\n              return of(checkErr);\n            // case ErrorCode.unauthorised :\n            //     return of(checkErr);\n          }\n        }\n\n        return throwError(checkErr);\n      }));\n    }\n    setError(error) {\n      let errorMessage = 'Unknown error occured';\n      if (error.error instanceof ErrorEvent) {\n        // Client side error\n        errorMessage = error.error.message;\n      } else {\n        // server side error\n        if (error.status === 401) {\n          return error.statusText;\n        }\n        if (error.error.errorMessage && error.status !== 0) {\n          {\n            errorMessage = error.error.errorMessage;\n          }\n        }\n        if (!error.error.errorMessage && error.error && error.status !== 0) {\n          {\n            errorMessage = error.error;\n          }\n        }\n      }\n      return errorMessage;\n    }\n    static #_ = this.ɵfac = function HttpErrorInterceptorService_Factory(t) {\n      return new (t || HttpErrorInterceptorService)(i0.ɵɵinject(i1.AlertifyService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpErrorInterceptorService,\n      factory: HttpErrorInterceptorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return HttpErrorInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}